/*
Paystack

The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.

API version: 1.0.0
Contact: techsupport@paystack.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paystack

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DedicatedVirtualAccountCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DedicatedVirtualAccountCreate{}

// DedicatedVirtualAccountCreate struct for DedicatedVirtualAccountCreate
type DedicatedVirtualAccountCreate struct {
	// Customer ID or code
	Customer string `json:"customer"`
	// The bank slug for preferred bank. To get a list of available banks, use the List Providers endpoint
	PreferredBank *string `json:"preferred_bank,omitempty"`
	// Subaccount code of the account you want to split the transaction with
	Subaccount *string `json:"subaccount,omitempty"`
	// Split code consisting of the lists of accounts you want to split the transaction with
	SplitCode *string `json:"split_code,omitempty"`
}

type _DedicatedVirtualAccountCreate DedicatedVirtualAccountCreate

// NewDedicatedVirtualAccountCreate instantiates a new DedicatedVirtualAccountCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDedicatedVirtualAccountCreate(customer string) *DedicatedVirtualAccountCreate {
	this := DedicatedVirtualAccountCreate{}
	this.Customer = customer
	return &this
}

// NewDedicatedVirtualAccountCreateWithDefaults instantiates a new DedicatedVirtualAccountCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDedicatedVirtualAccountCreateWithDefaults() *DedicatedVirtualAccountCreate {
	this := DedicatedVirtualAccountCreate{}
	return &this
}

// GetCustomer returns the Customer field value
func (o *DedicatedVirtualAccountCreate) GetCustomer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Customer
}

// GetCustomerOk returns a tuple with the Customer field value
// and a boolean to check if the value has been set.
func (o *DedicatedVirtualAccountCreate) GetCustomerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Customer, true
}

// SetCustomer sets field value
func (o *DedicatedVirtualAccountCreate) SetCustomer(v string) {
	o.Customer = v
}

// GetPreferredBank returns the PreferredBank field value if set, zero value otherwise.
func (o *DedicatedVirtualAccountCreate) GetPreferredBank() string {
	if o == nil || IsNil(o.PreferredBank) {
		var ret string
		return ret
	}
	return *o.PreferredBank
}

// GetPreferredBankOk returns a tuple with the PreferredBank field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DedicatedVirtualAccountCreate) GetPreferredBankOk() (*string, bool) {
	if o == nil || IsNil(o.PreferredBank) {
		return nil, false
	}
	return o.PreferredBank, true
}

// HasPreferredBank returns a boolean if a field has been set.
func (o *DedicatedVirtualAccountCreate) HasPreferredBank() bool {
	if o != nil && !IsNil(o.PreferredBank) {
		return true
	}

	return false
}

// SetPreferredBank gets a reference to the given string and assigns it to the PreferredBank field.
func (o *DedicatedVirtualAccountCreate) SetPreferredBank(v string) {
	o.PreferredBank = &v
}

// GetSubaccount returns the Subaccount field value if set, zero value otherwise.
func (o *DedicatedVirtualAccountCreate) GetSubaccount() string {
	if o == nil || IsNil(o.Subaccount) {
		var ret string
		return ret
	}
	return *o.Subaccount
}

// GetSubaccountOk returns a tuple with the Subaccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DedicatedVirtualAccountCreate) GetSubaccountOk() (*string, bool) {
	if o == nil || IsNil(o.Subaccount) {
		return nil, false
	}
	return o.Subaccount, true
}

// HasSubaccount returns a boolean if a field has been set.
func (o *DedicatedVirtualAccountCreate) HasSubaccount() bool {
	if o != nil && !IsNil(o.Subaccount) {
		return true
	}

	return false
}

// SetSubaccount gets a reference to the given string and assigns it to the Subaccount field.
func (o *DedicatedVirtualAccountCreate) SetSubaccount(v string) {
	o.Subaccount = &v
}

// GetSplitCode returns the SplitCode field value if set, zero value otherwise.
func (o *DedicatedVirtualAccountCreate) GetSplitCode() string {
	if o == nil || IsNil(o.SplitCode) {
		var ret string
		return ret
	}
	return *o.SplitCode
}

// GetSplitCodeOk returns a tuple with the SplitCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DedicatedVirtualAccountCreate) GetSplitCodeOk() (*string, bool) {
	if o == nil || IsNil(o.SplitCode) {
		return nil, false
	}
	return o.SplitCode, true
}

// HasSplitCode returns a boolean if a field has been set.
func (o *DedicatedVirtualAccountCreate) HasSplitCode() bool {
	if o != nil && !IsNil(o.SplitCode) {
		return true
	}

	return false
}

// SetSplitCode gets a reference to the given string and assigns it to the SplitCode field.
func (o *DedicatedVirtualAccountCreate) SetSplitCode(v string) {
	o.SplitCode = &v
}

func (o DedicatedVirtualAccountCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DedicatedVirtualAccountCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["customer"] = o.Customer
	if !IsNil(o.PreferredBank) {
		toSerialize["preferred_bank"] = o.PreferredBank
	}
	if !IsNil(o.Subaccount) {
		toSerialize["subaccount"] = o.Subaccount
	}
	if !IsNil(o.SplitCode) {
		toSerialize["split_code"] = o.SplitCode
	}
	return toSerialize, nil
}

func (o *DedicatedVirtualAccountCreate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"customer",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDedicatedVirtualAccountCreate := _DedicatedVirtualAccountCreate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDedicatedVirtualAccountCreate)

	if err != nil {
		return err
	}

	*o = DedicatedVirtualAccountCreate(varDedicatedVirtualAccountCreate)

	return err
}

type NullableDedicatedVirtualAccountCreate struct {
	value *DedicatedVirtualAccountCreate
	isSet bool
}

func (v NullableDedicatedVirtualAccountCreate) Get() *DedicatedVirtualAccountCreate {
	return v.value
}

func (v *NullableDedicatedVirtualAccountCreate) Set(val *DedicatedVirtualAccountCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableDedicatedVirtualAccountCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableDedicatedVirtualAccountCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDedicatedVirtualAccountCreate(val *DedicatedVirtualAccountCreate) *NullableDedicatedVirtualAccountCreate {
	return &NullableDedicatedVirtualAccountCreate{value: val, isSet: true}
}

func (v NullableDedicatedVirtualAccountCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDedicatedVirtualAccountCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


