/*
Paystack

The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.

API version: 1.0.0
Contact: techsupport@paystack.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paystack

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DisputeResolve type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DisputeResolve{}

// DisputeResolve struct for DisputeResolve
type DisputeResolve struct {
	// Dispute resolution. Accepted values, merchant-accepted, declined
	Resolution string `json:"resolution"`
	// Reason for resolving
	Message string `json:"message"`
	// The amount to refund, in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR
	RefundAmount string `json:"refund_amount"`
	// Filename of attachment returned via response from the Dispute upload URL
	UploadedFilename string `json:"uploaded_filename"`
	// Evidence Id for fraud claims
	Evidence *int32 `json:"evidence,omitempty"`
}

type _DisputeResolve DisputeResolve

// NewDisputeResolve instantiates a new DisputeResolve object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDisputeResolve(resolution string, message string, refundAmount string, uploadedFilename string) *DisputeResolve {
	this := DisputeResolve{}
	this.Resolution = resolution
	this.Message = message
	this.RefundAmount = refundAmount
	this.UploadedFilename = uploadedFilename
	return &this
}

// NewDisputeResolveWithDefaults instantiates a new DisputeResolve object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDisputeResolveWithDefaults() *DisputeResolve {
	this := DisputeResolve{}
	return &this
}

// GetResolution returns the Resolution field value
func (o *DisputeResolve) GetResolution() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Resolution
}

// GetResolutionOk returns a tuple with the Resolution field value
// and a boolean to check if the value has been set.
func (o *DisputeResolve) GetResolutionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Resolution, true
}

// SetResolution sets field value
func (o *DisputeResolve) SetResolution(v string) {
	o.Resolution = v
}

// GetMessage returns the Message field value
func (o *DisputeResolve) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *DisputeResolve) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *DisputeResolve) SetMessage(v string) {
	o.Message = v
}

// GetRefundAmount returns the RefundAmount field value
func (o *DisputeResolve) GetRefundAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RefundAmount
}

// GetRefundAmountOk returns a tuple with the RefundAmount field value
// and a boolean to check if the value has been set.
func (o *DisputeResolve) GetRefundAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RefundAmount, true
}

// SetRefundAmount sets field value
func (o *DisputeResolve) SetRefundAmount(v string) {
	o.RefundAmount = v
}

// GetUploadedFilename returns the UploadedFilename field value
func (o *DisputeResolve) GetUploadedFilename() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UploadedFilename
}

// GetUploadedFilenameOk returns a tuple with the UploadedFilename field value
// and a boolean to check if the value has been set.
func (o *DisputeResolve) GetUploadedFilenameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UploadedFilename, true
}

// SetUploadedFilename sets field value
func (o *DisputeResolve) SetUploadedFilename(v string) {
	o.UploadedFilename = v
}

// GetEvidence returns the Evidence field value if set, zero value otherwise.
func (o *DisputeResolve) GetEvidence() int32 {
	if o == nil || IsNil(o.Evidence) {
		var ret int32
		return ret
	}
	return *o.Evidence
}

// GetEvidenceOk returns a tuple with the Evidence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisputeResolve) GetEvidenceOk() (*int32, bool) {
	if o == nil || IsNil(o.Evidence) {
		return nil, false
	}
	return o.Evidence, true
}

// HasEvidence returns a boolean if a field has been set.
func (o *DisputeResolve) HasEvidence() bool {
	if o != nil && !IsNil(o.Evidence) {
		return true
	}

	return false
}

// SetEvidence gets a reference to the given int32 and assigns it to the Evidence field.
func (o *DisputeResolve) SetEvidence(v int32) {
	o.Evidence = &v
}

func (o DisputeResolve) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DisputeResolve) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resolution"] = o.Resolution
	toSerialize["message"] = o.Message
	toSerialize["refund_amount"] = o.RefundAmount
	toSerialize["uploaded_filename"] = o.UploadedFilename
	if !IsNil(o.Evidence) {
		toSerialize["evidence"] = o.Evidence
	}
	return toSerialize, nil
}

func (o *DisputeResolve) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resolution",
		"message",
		"refund_amount",
		"uploaded_filename",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDisputeResolve := _DisputeResolve{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDisputeResolve)

	if err != nil {
		return err
	}

	*o = DisputeResolve(varDisputeResolve)

	return err
}

type NullableDisputeResolve struct {
	value *DisputeResolve
	isSet bool
}

func (v NullableDisputeResolve) Get() *DisputeResolve {
	return v.value
}

func (v *NullableDisputeResolve) Set(val *DisputeResolve) {
	v.value = val
	v.isSet = true
}

func (v NullableDisputeResolve) IsSet() bool {
	return v.isSet
}

func (v *NullableDisputeResolve) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDisputeResolve(val *DisputeResolve) *NullableDisputeResolve {
	return &NullableDisputeResolve{value: val, isSet: true}
}

func (v NullableDisputeResolve) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDisputeResolve) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


