/*
Paystack

The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.

API version: 1.0.0
Contact: techsupport@paystack.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paystack

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)


// ChargeAPIService ChargeAPI service
type ChargeAPIService service

type ApiChargeCheckRequest struct {
	ctx context.Context
	ApiService *ChargeAPIService
	reference string
}

func (r ApiChargeCheckRequest) Execute() (*Response, *http.Response, error) {
	return r.ApiService.ChargeCheckExecute(r)
}

/*
ChargeCheck Check pending charge

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reference
 @return ApiChargeCheckRequest
*/
func (a *ChargeAPIService) ChargeCheck(ctx context.Context, reference string) ApiChargeCheckRequest {
	return ApiChargeCheckRequest{
		ApiService: a,
		ctx: ctx,
		reference: reference,
	}
}

// Execute executes the request
//  @return Response
func (a *ChargeAPIService) ChargeCheckExecute(r ApiChargeCheckRequest) (*Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChargeAPIService.ChargeCheck")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/charge/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(parameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiChargeCreateRequest struct {
	ctx context.Context
	ApiService *ChargeAPIService
	email *string
	amount *string
	authorizationCode *string
	pin *string
	reference *string
	birthday *time.Time
	deviceId *string
	metadata *string
	bank *Bank
	mobileMoney *MobileMoney
	ussd *USSD
	eft *EFT
}

// Customer&#39;s email address
func (r ApiChargeCreateRequest) Email(email string) ApiChargeCreateRequest {
	r.email = &email
	return r
}

// Amount should be in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR
func (r ApiChargeCreateRequest) Amount(amount string) ApiChargeCreateRequest {
	r.amount = &amount
	return r
}

// An authorization code to charge.
func (r ApiChargeCreateRequest) AuthorizationCode(authorizationCode string) ApiChargeCreateRequest {
	r.authorizationCode = &authorizationCode
	return r
}

// 4-digit PIN (send with a non-reusable authorization code)
func (r ApiChargeCreateRequest) Pin(pin string) ApiChargeCreateRequest {
	r.pin = &pin
	return r
}

// Unique transaction reference. Only -, .&#x60;, &#x3D; and alphanumeric characters allowed.
func (r ApiChargeCreateRequest) Reference(reference string) ApiChargeCreateRequest {
	r.reference = &reference
	return r
}

// The customer&#39;s birthday in the format YYYY-MM-DD e.g 2017-05-16
func (r ApiChargeCreateRequest) Birthday(birthday time.Time) ApiChargeCreateRequest {
	r.birthday = &birthday
	return r
}

// This is the unique identifier of the device a user uses in making payment.  Only -, .&#x60;, &#x3D; and alphanumeric characters are allowed.
func (r ApiChargeCreateRequest) DeviceId(deviceId string) ApiChargeCreateRequest {
	r.deviceId = &deviceId
	return r
}

// Stringified JSON object of custom data
func (r ApiChargeCreateRequest) Metadata(metadata string) ApiChargeCreateRequest {
	r.metadata = &metadata
	return r
}

func (r ApiChargeCreateRequest) Bank(bank Bank) ApiChargeCreateRequest {
	r.bank = &bank
	return r
}

func (r ApiChargeCreateRequest) MobileMoney(mobileMoney MobileMoney) ApiChargeCreateRequest {
	r.mobileMoney = &mobileMoney
	return r
}

func (r ApiChargeCreateRequest) Ussd(ussd USSD) ApiChargeCreateRequest {
	r.ussd = &ussd
	return r
}

func (r ApiChargeCreateRequest) Eft(eft EFT) ApiChargeCreateRequest {
	r.eft = &eft
	return r
}

func (r ApiChargeCreateRequest) Execute() (*Response, *http.Response, error) {
	return r.ApiService.ChargeCreateExecute(r)
}

/*
ChargeCreate Create Charge

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiChargeCreateRequest
*/
func (a *ChargeAPIService) ChargeCreate(ctx context.Context) ApiChargeCreateRequest {
	return ApiChargeCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Response
func (a *ChargeAPIService) ChargeCreateExecute(r ApiChargeCreateRequest) (*Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChargeAPIService.ChargeCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/charge"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.email == nil {
		return localVarReturnValue, nil, reportError("email is required and must be specified")
	}
	if r.amount == nil {
		return localVarReturnValue, nil, reportError("amount is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded", "application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "email", r.email, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "amount", r.amount, "", "")
	if r.authorizationCode != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "authorization_code", r.authorizationCode, "", "")
	}
	if r.pin != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "pin", r.pin, "", "")
	}
	if r.reference != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "reference", r.reference, "", "")
	}
	if r.birthday != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "birthday", r.birthday, "", "")
	}
	if r.deviceId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "device_id", r.deviceId, "", "")
	}
	if r.metadata != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "metadata", r.metadata, "", "")
	}
	if r.bank != nil {
		paramJson, err := parameterToJson(*r.bank)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		localVarFormParams.Add("bank", paramJson)
	}
	if r.mobileMoney != nil {
		paramJson, err := parameterToJson(*r.mobileMoney)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		localVarFormParams.Add("mobile_money", paramJson)
	}
	if r.ussd != nil {
		paramJson, err := parameterToJson(*r.ussd)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		localVarFormParams.Add("ussd", paramJson)
	}
	if r.eft != nil {
		paramJson, err := parameterToJson(*r.eft)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		localVarFormParams.Add("eft", paramJson)
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiChargeSubmitAddressRequest struct {
	ctx context.Context
	ApiService *ChargeAPIService
	address *string
	city *string
	state *string
	zipcode *string
	reference *string
}

// Customer&#39;s address
func (r ApiChargeSubmitAddressRequest) Address(address string) ApiChargeSubmitAddressRequest {
	r.address = &address
	return r
}

// Customer&#39;s city
func (r ApiChargeSubmitAddressRequest) City(city string) ApiChargeSubmitAddressRequest {
	r.city = &city
	return r
}

// Customer&#39;s state
func (r ApiChargeSubmitAddressRequest) State(state string) ApiChargeSubmitAddressRequest {
	r.state = &state
	return r
}

// Customer&#39;s zipcode
func (r ApiChargeSubmitAddressRequest) Zipcode(zipcode string) ApiChargeSubmitAddressRequest {
	r.zipcode = &zipcode
	return r
}

// The reference of the ongoing transaction
func (r ApiChargeSubmitAddressRequest) Reference(reference string) ApiChargeSubmitAddressRequest {
	r.reference = &reference
	return r
}

func (r ApiChargeSubmitAddressRequest) Execute() (*Response, *http.Response, error) {
	return r.ApiService.ChargeSubmitAddressExecute(r)
}

/*
ChargeSubmitAddress Submit Address

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiChargeSubmitAddressRequest
*/
func (a *ChargeAPIService) ChargeSubmitAddress(ctx context.Context) ApiChargeSubmitAddressRequest {
	return ApiChargeSubmitAddressRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Response
func (a *ChargeAPIService) ChargeSubmitAddressExecute(r ApiChargeSubmitAddressRequest) (*Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChargeAPIService.ChargeSubmitAddress")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/charge/submit_address"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.address == nil {
		return localVarReturnValue, nil, reportError("address is required and must be specified")
	}
	if r.city == nil {
		return localVarReturnValue, nil, reportError("city is required and must be specified")
	}
	if r.state == nil {
		return localVarReturnValue, nil, reportError("state is required and must be specified")
	}
	if r.zipcode == nil {
		return localVarReturnValue, nil, reportError("zipcode is required and must be specified")
	}
	if r.reference == nil {
		return localVarReturnValue, nil, reportError("reference is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded", "application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "address", r.address, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "city", r.city, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "state", r.state, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "zipcode", r.zipcode, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "reference", r.reference, "", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiChargeSubmitBirthdayRequest struct {
	ctx context.Context
	ApiService *ChargeAPIService
	birthday *string
	reference *string
}

// Customer&#39;s birthday in the format YYYY-MM-DD e.g 2016-09-21
func (r ApiChargeSubmitBirthdayRequest) Birthday(birthday string) ApiChargeSubmitBirthdayRequest {
	r.birthday = &birthday
	return r
}

// The reference of the ongoing transaction
func (r ApiChargeSubmitBirthdayRequest) Reference(reference string) ApiChargeSubmitBirthdayRequest {
	r.reference = &reference
	return r
}

func (r ApiChargeSubmitBirthdayRequest) Execute() (*Response, *http.Response, error) {
	return r.ApiService.ChargeSubmitBirthdayExecute(r)
}

/*
ChargeSubmitBirthday Submit Birthday

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiChargeSubmitBirthdayRequest
*/
func (a *ChargeAPIService) ChargeSubmitBirthday(ctx context.Context) ApiChargeSubmitBirthdayRequest {
	return ApiChargeSubmitBirthdayRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Response
func (a *ChargeAPIService) ChargeSubmitBirthdayExecute(r ApiChargeSubmitBirthdayRequest) (*Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChargeAPIService.ChargeSubmitBirthday")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/charge/submit_birthday"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.birthday == nil {
		return localVarReturnValue, nil, reportError("birthday is required and must be specified")
	}
	if r.reference == nil {
		return localVarReturnValue, nil, reportError("reference is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded", "application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "birthday", r.birthday, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "reference", r.reference, "", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiChargeSubmitOtpRequest struct {
	ctx context.Context
	ApiService *ChargeAPIService
	otp *string
	reference *string
}

// Customer&#39;s OTP
func (r ApiChargeSubmitOtpRequest) Otp(otp string) ApiChargeSubmitOtpRequest {
	r.otp = &otp
	return r
}

// The reference of the ongoing transaction
func (r ApiChargeSubmitOtpRequest) Reference(reference string) ApiChargeSubmitOtpRequest {
	r.reference = &reference
	return r
}

func (r ApiChargeSubmitOtpRequest) Execute() (*Response, *http.Response, error) {
	return r.ApiService.ChargeSubmitOtpExecute(r)
}

/*
ChargeSubmitOtp Submit OTP

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiChargeSubmitOtpRequest
*/
func (a *ChargeAPIService) ChargeSubmitOtp(ctx context.Context) ApiChargeSubmitOtpRequest {
	return ApiChargeSubmitOtpRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Response
func (a *ChargeAPIService) ChargeSubmitOtpExecute(r ApiChargeSubmitOtpRequest) (*Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChargeAPIService.ChargeSubmitOtp")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/charge/submit_otp"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.otp == nil {
		return localVarReturnValue, nil, reportError("otp is required and must be specified")
	}
	if r.reference == nil {
		return localVarReturnValue, nil, reportError("reference is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded", "application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "otp", r.otp, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "reference", r.reference, "", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiChargeSubmitPhoneRequest struct {
	ctx context.Context
	ApiService *ChargeAPIService
	phone *string
	reference *string
}

// Customer&#39;s mobile number
func (r ApiChargeSubmitPhoneRequest) Phone(phone string) ApiChargeSubmitPhoneRequest {
	r.phone = &phone
	return r
}

// The reference of the ongoing transaction
func (r ApiChargeSubmitPhoneRequest) Reference(reference string) ApiChargeSubmitPhoneRequest {
	r.reference = &reference
	return r
}

func (r ApiChargeSubmitPhoneRequest) Execute() (*Response, *http.Response, error) {
	return r.ApiService.ChargeSubmitPhoneExecute(r)
}

/*
ChargeSubmitPhone Submit Phone

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiChargeSubmitPhoneRequest
*/
func (a *ChargeAPIService) ChargeSubmitPhone(ctx context.Context) ApiChargeSubmitPhoneRequest {
	return ApiChargeSubmitPhoneRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Response
func (a *ChargeAPIService) ChargeSubmitPhoneExecute(r ApiChargeSubmitPhoneRequest) (*Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChargeAPIService.ChargeSubmitPhone")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/charge/submit_phone"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.phone == nil {
		return localVarReturnValue, nil, reportError("phone is required and must be specified")
	}
	if r.reference == nil {
		return localVarReturnValue, nil, reportError("reference is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded", "application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "phone", r.phone, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "reference", r.reference, "", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiChargeSubmitPinRequest struct {
	ctx context.Context
	ApiService *ChargeAPIService
	pin *string
	reference *string
}

// Customer&#39;s PIN
func (r ApiChargeSubmitPinRequest) Pin(pin string) ApiChargeSubmitPinRequest {
	r.pin = &pin
	return r
}

// Transaction reference that requires the PIN
func (r ApiChargeSubmitPinRequest) Reference(reference string) ApiChargeSubmitPinRequest {
	r.reference = &reference
	return r
}

func (r ApiChargeSubmitPinRequest) Execute() (*Response, *http.Response, error) {
	return r.ApiService.ChargeSubmitPinExecute(r)
}

/*
ChargeSubmitPin Submit PIN

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiChargeSubmitPinRequest
*/
func (a *ChargeAPIService) ChargeSubmitPin(ctx context.Context) ApiChargeSubmitPinRequest {
	return ApiChargeSubmitPinRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Response
func (a *ChargeAPIService) ChargeSubmitPinExecute(r ApiChargeSubmitPinRequest) (*Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChargeAPIService.ChargeSubmitPin")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/charge/submit_pin"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pin == nil {
		return localVarReturnValue, nil, reportError("pin is required and must be specified")
	}
	if r.reference == nil {
		return localVarReturnValue, nil, reportError("reference is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded", "application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "pin", r.pin, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "reference", r.reference, "", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
