/*
Paystack

The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.

API version: 1.0.0
Contact: techsupport@paystack.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paystack

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)


// SubaccountAPIService SubaccountAPI service
type SubaccountAPIService service

type ApiSubaccountCreateRequest struct {
	ctx context.Context
	ApiService *SubaccountAPIService
	businessName *string
	settlementBank *string
	accountNumber *string
	percentageCharge *float32
	description *string
	primaryContactEmail *string
	primaryContactName *string
	primaryContactPhone *string
	metadata *string
}

// Name of business for subaccount
func (r ApiSubaccountCreateRequest) BusinessName(businessName string) ApiSubaccountCreateRequest {
	r.businessName = &businessName
	return r
}

// Bank code for the bank. You can get the list of Bank Codes by calling the List Banks endpoint.
func (r ApiSubaccountCreateRequest) SettlementBank(settlementBank string) ApiSubaccountCreateRequest {
	r.settlementBank = &settlementBank
	return r
}

// Bank account number
func (r ApiSubaccountCreateRequest) AccountNumber(accountNumber string) ApiSubaccountCreateRequest {
	r.accountNumber = &accountNumber
	return r
}

// Customer&#39;s phone number
func (r ApiSubaccountCreateRequest) PercentageCharge(percentageCharge float32) ApiSubaccountCreateRequest {
	r.percentageCharge = &percentageCharge
	return r
}

// A description for this subaccount
func (r ApiSubaccountCreateRequest) Description(description string) ApiSubaccountCreateRequest {
	r.description = &description
	return r
}

// A contact email for the subaccount
func (r ApiSubaccountCreateRequest) PrimaryContactEmail(primaryContactEmail string) ApiSubaccountCreateRequest {
	r.primaryContactEmail = &primaryContactEmail
	return r
}

// The name of the contact person for this subaccount
func (r ApiSubaccountCreateRequest) PrimaryContactName(primaryContactName string) ApiSubaccountCreateRequest {
	r.primaryContactName = &primaryContactName
	return r
}

// A phone number to call for this subaccount
func (r ApiSubaccountCreateRequest) PrimaryContactPhone(primaryContactPhone string) ApiSubaccountCreateRequest {
	r.primaryContactPhone = &primaryContactPhone
	return r
}

// Stringified JSON object of custom data
func (r ApiSubaccountCreateRequest) Metadata(metadata string) ApiSubaccountCreateRequest {
	r.metadata = &metadata
	return r
}

func (r ApiSubaccountCreateRequest) Execute() (*Response, *http.Response, error) {
	return r.ApiService.SubaccountCreateExecute(r)
}

/*
SubaccountCreate Create Subaccount

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSubaccountCreateRequest
*/
func (a *SubaccountAPIService) SubaccountCreate(ctx context.Context) ApiSubaccountCreateRequest {
	return ApiSubaccountCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Response
func (a *SubaccountAPIService) SubaccountCreateExecute(r ApiSubaccountCreateRequest) (*Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubaccountAPIService.SubaccountCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subaccount"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.businessName == nil {
		return localVarReturnValue, nil, reportError("businessName is required and must be specified")
	}
	if r.settlementBank == nil {
		return localVarReturnValue, nil, reportError("settlementBank is required and must be specified")
	}
	if r.accountNumber == nil {
		return localVarReturnValue, nil, reportError("accountNumber is required and must be specified")
	}
	if r.percentageCharge == nil {
		return localVarReturnValue, nil, reportError("percentageCharge is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded", "application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "business_name", r.businessName, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "settlement_bank", r.settlementBank, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "account_number", r.accountNumber, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "percentage_charge", r.percentageCharge, "", "")
	if r.description != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "description", r.description, "", "")
	}
	if r.primaryContactEmail != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "primary_contact_email", r.primaryContactEmail, "", "")
	}
	if r.primaryContactName != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "primary_contact_name", r.primaryContactName, "", "")
	}
	if r.primaryContactPhone != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "primary_contact_phone", r.primaryContactPhone, "", "")
	}
	if r.metadata != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "metadata", r.metadata, "", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSubaccountFetchRequest struct {
	ctx context.Context
	ApiService *SubaccountAPIService
	code string
}

func (r ApiSubaccountFetchRequest) Execute() (*Response, *http.Response, error) {
	return r.ApiService.SubaccountFetchExecute(r)
}

/*
SubaccountFetch Fetch Subaccount

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param code
 @return ApiSubaccountFetchRequest
*/
func (a *SubaccountAPIService) SubaccountFetch(ctx context.Context, code string) ApiSubaccountFetchRequest {
	return ApiSubaccountFetchRequest{
		ApiService: a,
		ctx: ctx,
		code: code,
	}
}

// Execute executes the request
//  @return Response
func (a *SubaccountAPIService) SubaccountFetchExecute(r ApiSubaccountFetchRequest) (*Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubaccountAPIService.SubaccountFetch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subaccount/{code}"
	localVarPath = strings.Replace(localVarPath, "{"+"code"+"}", url.PathEscape(parameterValueToString(r.code, "code")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSubaccountListRequest struct {
	ctx context.Context
	ApiService *SubaccountAPIService
	perPage *int32
	page *int32
	from *time.Time
	to *time.Time
}

// Number of records to fetch per page
func (r ApiSubaccountListRequest) PerPage(perPage int32) ApiSubaccountListRequest {
	r.perPage = &perPage
	return r
}

// The section to retrieve
func (r ApiSubaccountListRequest) Page(page int32) ApiSubaccountListRequest {
	r.page = &page
	return r
}

// The start date
func (r ApiSubaccountListRequest) From(from time.Time) ApiSubaccountListRequest {
	r.from = &from
	return r
}

// The end date
func (r ApiSubaccountListRequest) To(to time.Time) ApiSubaccountListRequest {
	r.to = &to
	return r
}

func (r ApiSubaccountListRequest) Execute() (*Response, *http.Response, error) {
	return r.ApiService.SubaccountListExecute(r)
}

/*
SubaccountList List Subaccounts

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSubaccountListRequest
*/
func (a *SubaccountAPIService) SubaccountList(ctx context.Context) ApiSubaccountListRequest {
	return ApiSubaccountListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Response
func (a *SubaccountAPIService) SubaccountListExecute(r ApiSubaccountListRequest) (*Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubaccountAPIService.SubaccountList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subaccount"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "perPage", r.perPage, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.from != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "from", r.from, "form", "")
	}
	if r.to != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "to", r.to, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSubaccountUpdateRequest struct {
	ctx context.Context
	ApiService *SubaccountAPIService
	code string
	businessName *string
	settlementBank *string
	accountNumber *string
	active *bool
	percentageCharge *float32
	description *string
	primaryContactEmail *string
	primaryContactName *string
	primaryContactPhone *string
	metadata *string
}

// Name of business for subaccount
func (r ApiSubaccountUpdateRequest) BusinessName(businessName string) ApiSubaccountUpdateRequest {
	r.businessName = &businessName
	return r
}

// Bank code for the bank. You can get the list of Bank Codes by calling the List Banks endpoint.
func (r ApiSubaccountUpdateRequest) SettlementBank(settlementBank string) ApiSubaccountUpdateRequest {
	r.settlementBank = &settlementBank
	return r
}

// Bank account number
func (r ApiSubaccountUpdateRequest) AccountNumber(accountNumber string) ApiSubaccountUpdateRequest {
	r.accountNumber = &accountNumber
	return r
}

// Activate or deactivate a subaccount
func (r ApiSubaccountUpdateRequest) Active(active bool) ApiSubaccountUpdateRequest {
	r.active = &active
	return r
}

// Customer&#39;s phone number
func (r ApiSubaccountUpdateRequest) PercentageCharge(percentageCharge float32) ApiSubaccountUpdateRequest {
	r.percentageCharge = &percentageCharge
	return r
}

// A description for this subaccount
func (r ApiSubaccountUpdateRequest) Description(description string) ApiSubaccountUpdateRequest {
	r.description = &description
	return r
}

// A contact email for the subaccount
func (r ApiSubaccountUpdateRequest) PrimaryContactEmail(primaryContactEmail string) ApiSubaccountUpdateRequest {
	r.primaryContactEmail = &primaryContactEmail
	return r
}

// The name of the contact person for this subaccount
func (r ApiSubaccountUpdateRequest) PrimaryContactName(primaryContactName string) ApiSubaccountUpdateRequest {
	r.primaryContactName = &primaryContactName
	return r
}

// A phone number to call for this subaccount
func (r ApiSubaccountUpdateRequest) PrimaryContactPhone(primaryContactPhone string) ApiSubaccountUpdateRequest {
	r.primaryContactPhone = &primaryContactPhone
	return r
}

// Stringified JSON object of custom data
func (r ApiSubaccountUpdateRequest) Metadata(metadata string) ApiSubaccountUpdateRequest {
	r.metadata = &metadata
	return r
}

func (r ApiSubaccountUpdateRequest) Execute() (*Response, *http.Response, error) {
	return r.ApiService.SubaccountUpdateExecute(r)
}

/*
SubaccountUpdate Update Subaccount

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param code
 @return ApiSubaccountUpdateRequest
*/
func (a *SubaccountAPIService) SubaccountUpdate(ctx context.Context, code string) ApiSubaccountUpdateRequest {
	return ApiSubaccountUpdateRequest{
		ApiService: a,
		ctx: ctx,
		code: code,
	}
}

// Execute executes the request
//  @return Response
func (a *SubaccountAPIService) SubaccountUpdateExecute(r ApiSubaccountUpdateRequest) (*Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubaccountAPIService.SubaccountUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subaccount/{code}"
	localVarPath = strings.Replace(localVarPath, "{"+"code"+"}", url.PathEscape(parameterValueToString(r.code, "code")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded", "application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.businessName != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "business_name", r.businessName, "", "")
	}
	if r.settlementBank != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "settlement_bank", r.settlementBank, "", "")
	}
	if r.accountNumber != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "account_number", r.accountNumber, "", "")
	}
	if r.active != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "active", r.active, "", "")
	}
	if r.percentageCharge != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "percentage_charge", r.percentageCharge, "", "")
	}
	if r.description != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "description", r.description, "", "")
	}
	if r.primaryContactEmail != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "primary_contact_email", r.primaryContactEmail, "", "")
	}
	if r.primaryContactName != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "primary_contact_name", r.primaryContactName, "", "")
	}
	if r.primaryContactPhone != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "primary_contact_phone", r.primaryContactPhone, "", "")
	}
	if r.metadata != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "metadata", r.metadata, "", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
