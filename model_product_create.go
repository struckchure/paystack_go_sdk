/*
Paystack

The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.

API version: 1.0.0
Contact: techsupport@paystack.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paystack

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProductCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductCreate{}

// ProductCreate struct for ProductCreate
type ProductCreate struct {
	// Name of product
	Name string `json:"name"`
	// The description of the product
	Description string `json:"description"`
	// Price should be in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR
	Price int32 `json:"price"`
	// Currency in which price is set. Allowed values are: NGN, GHS, ZAR or USD
	Currency string `json:"currency"`
	// Set to true if the product has limited stock. Leave as false if the product has unlimited stock
	Limited *bool `json:"limited,omitempty"`
	// Number of products in stock. Use if limited is true
	Quantity *int32 `json:"quantity,omitempty"`
}

type _ProductCreate ProductCreate

// NewProductCreate instantiates a new ProductCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductCreate(name string, description string, price int32, currency string) *ProductCreate {
	this := ProductCreate{}
	this.Name = name
	this.Description = description
	this.Price = price
	this.Currency = currency
	return &this
}

// NewProductCreateWithDefaults instantiates a new ProductCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductCreateWithDefaults() *ProductCreate {
	this := ProductCreate{}
	return &this
}

// GetName returns the Name field value
func (o *ProductCreate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ProductCreate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ProductCreate) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *ProductCreate) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *ProductCreate) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *ProductCreate) SetDescription(v string) {
	o.Description = v
}

// GetPrice returns the Price field value
func (o *ProductCreate) GetPrice() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *ProductCreate) GetPriceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *ProductCreate) SetPrice(v int32) {
	o.Price = v
}

// GetCurrency returns the Currency field value
func (o *ProductCreate) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *ProductCreate) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *ProductCreate) SetCurrency(v string) {
	o.Currency = v
}

// GetLimited returns the Limited field value if set, zero value otherwise.
func (o *ProductCreate) GetLimited() bool {
	if o == nil || IsNil(o.Limited) {
		var ret bool
		return ret
	}
	return *o.Limited
}

// GetLimitedOk returns a tuple with the Limited field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductCreate) GetLimitedOk() (*bool, bool) {
	if o == nil || IsNil(o.Limited) {
		return nil, false
	}
	return o.Limited, true
}

// HasLimited returns a boolean if a field has been set.
func (o *ProductCreate) HasLimited() bool {
	if o != nil && !IsNil(o.Limited) {
		return true
	}

	return false
}

// SetLimited gets a reference to the given bool and assigns it to the Limited field.
func (o *ProductCreate) SetLimited(v bool) {
	o.Limited = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *ProductCreate) GetQuantity() int32 {
	if o == nil || IsNil(o.Quantity) {
		var ret int32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductCreate) GetQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *ProductCreate) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given int32 and assigns it to the Quantity field.
func (o *ProductCreate) SetQuantity(v int32) {
	o.Quantity = &v
}

func (o ProductCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	toSerialize["price"] = o.Price
	toSerialize["currency"] = o.Currency
	if !IsNil(o.Limited) {
		toSerialize["limited"] = o.Limited
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	return toSerialize, nil
}

func (o *ProductCreate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"description",
		"price",
		"currency",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProductCreate := _ProductCreate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProductCreate)

	if err != nil {
		return err
	}

	*o = ProductCreate(varProductCreate)

	return err
}

type NullableProductCreate struct {
	value *ProductCreate
	isSet bool
}

func (v NullableProductCreate) Get() *ProductCreate {
	return v.value
}

func (v *NullableProductCreate) Set(val *ProductCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableProductCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableProductCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductCreate(val *ProductCreate) *NullableProductCreate {
	return &NullableProductCreate{value: val, isSet: true}
}

func (v NullableProductCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


