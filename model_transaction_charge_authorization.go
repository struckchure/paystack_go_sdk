/*
Paystack

The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.

API version: 1.0.0
Contact: techsupport@paystack.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paystack

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TransactionChargeAuthorization type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionChargeAuthorization{}

// TransactionChargeAuthorization struct for TransactionChargeAuthorization
type TransactionChargeAuthorization struct {
	// Customer's email address
	Email string `json:"email"`
	// Amount should be in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR
	Amount int32 `json:"amount"`
	// Valid authorization code to charge
	AuthorizationCode string `json:"authorization_code"`
	// Unique transaction reference. Only -, ., = and alphanumeric characters allowed.
	Reference *string `json:"reference,omitempty"`
	// The transaction currency
	Currency *string `json:"currency,omitempty"`
	// Stringified JSON object of custom data
	Metadata *string `json:"metadata,omitempty"`
	// The split code of the transaction split
	SplitCode *string `json:"split_code,omitempty"`
	// The code for the subaccount that owns the payment
	Subaccount *string `json:"subaccount,omitempty"`
	// A flat fee to charge the subaccount for a transaction.  This overrides the split percentage set when the subaccount was created
	TransactionCharge *string `json:"transaction_charge,omitempty"`
	// The beare of the transaction charge
	Bearer *string `json:"bearer,omitempty"`
	// If you are making a scheduled charge call, it is a good idea to queue them so the processing system does not get overloaded causing transaction processing errors.
	Queue *bool `json:"queue,omitempty"`
}

type _TransactionChargeAuthorization TransactionChargeAuthorization

// NewTransactionChargeAuthorization instantiates a new TransactionChargeAuthorization object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionChargeAuthorization(email string, amount int32, authorizationCode string) *TransactionChargeAuthorization {
	this := TransactionChargeAuthorization{}
	this.Email = email
	this.Amount = amount
	this.AuthorizationCode = authorizationCode
	return &this
}

// NewTransactionChargeAuthorizationWithDefaults instantiates a new TransactionChargeAuthorization object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionChargeAuthorizationWithDefaults() *TransactionChargeAuthorization {
	this := TransactionChargeAuthorization{}
	return &this
}

// GetEmail returns the Email field value
func (o *TransactionChargeAuthorization) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *TransactionChargeAuthorization) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *TransactionChargeAuthorization) SetEmail(v string) {
	o.Email = v
}

// GetAmount returns the Amount field value
func (o *TransactionChargeAuthorization) GetAmount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *TransactionChargeAuthorization) GetAmountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *TransactionChargeAuthorization) SetAmount(v int32) {
	o.Amount = v
}

// GetAuthorizationCode returns the AuthorizationCode field value
func (o *TransactionChargeAuthorization) GetAuthorizationCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuthorizationCode
}

// GetAuthorizationCodeOk returns a tuple with the AuthorizationCode field value
// and a boolean to check if the value has been set.
func (o *TransactionChargeAuthorization) GetAuthorizationCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthorizationCode, true
}

// SetAuthorizationCode sets field value
func (o *TransactionChargeAuthorization) SetAuthorizationCode(v string) {
	o.AuthorizationCode = v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *TransactionChargeAuthorization) GetReference() string {
	if o == nil || IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionChargeAuthorization) GetReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *TransactionChargeAuthorization) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *TransactionChargeAuthorization) SetReference(v string) {
	o.Reference = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *TransactionChargeAuthorization) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionChargeAuthorization) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *TransactionChargeAuthorization) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *TransactionChargeAuthorization) SetCurrency(v string) {
	o.Currency = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *TransactionChargeAuthorization) GetMetadata() string {
	if o == nil || IsNil(o.Metadata) {
		var ret string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionChargeAuthorization) GetMetadataOk() (*string, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *TransactionChargeAuthorization) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given string and assigns it to the Metadata field.
func (o *TransactionChargeAuthorization) SetMetadata(v string) {
	o.Metadata = &v
}

// GetSplitCode returns the SplitCode field value if set, zero value otherwise.
func (o *TransactionChargeAuthorization) GetSplitCode() string {
	if o == nil || IsNil(o.SplitCode) {
		var ret string
		return ret
	}
	return *o.SplitCode
}

// GetSplitCodeOk returns a tuple with the SplitCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionChargeAuthorization) GetSplitCodeOk() (*string, bool) {
	if o == nil || IsNil(o.SplitCode) {
		return nil, false
	}
	return o.SplitCode, true
}

// HasSplitCode returns a boolean if a field has been set.
func (o *TransactionChargeAuthorization) HasSplitCode() bool {
	if o != nil && !IsNil(o.SplitCode) {
		return true
	}

	return false
}

// SetSplitCode gets a reference to the given string and assigns it to the SplitCode field.
func (o *TransactionChargeAuthorization) SetSplitCode(v string) {
	o.SplitCode = &v
}

// GetSubaccount returns the Subaccount field value if set, zero value otherwise.
func (o *TransactionChargeAuthorization) GetSubaccount() string {
	if o == nil || IsNil(o.Subaccount) {
		var ret string
		return ret
	}
	return *o.Subaccount
}

// GetSubaccountOk returns a tuple with the Subaccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionChargeAuthorization) GetSubaccountOk() (*string, bool) {
	if o == nil || IsNil(o.Subaccount) {
		return nil, false
	}
	return o.Subaccount, true
}

// HasSubaccount returns a boolean if a field has been set.
func (o *TransactionChargeAuthorization) HasSubaccount() bool {
	if o != nil && !IsNil(o.Subaccount) {
		return true
	}

	return false
}

// SetSubaccount gets a reference to the given string and assigns it to the Subaccount field.
func (o *TransactionChargeAuthorization) SetSubaccount(v string) {
	o.Subaccount = &v
}

// GetTransactionCharge returns the TransactionCharge field value if set, zero value otherwise.
func (o *TransactionChargeAuthorization) GetTransactionCharge() string {
	if o == nil || IsNil(o.TransactionCharge) {
		var ret string
		return ret
	}
	return *o.TransactionCharge
}

// GetTransactionChargeOk returns a tuple with the TransactionCharge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionChargeAuthorization) GetTransactionChargeOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionCharge) {
		return nil, false
	}
	return o.TransactionCharge, true
}

// HasTransactionCharge returns a boolean if a field has been set.
func (o *TransactionChargeAuthorization) HasTransactionCharge() bool {
	if o != nil && !IsNil(o.TransactionCharge) {
		return true
	}

	return false
}

// SetTransactionCharge gets a reference to the given string and assigns it to the TransactionCharge field.
func (o *TransactionChargeAuthorization) SetTransactionCharge(v string) {
	o.TransactionCharge = &v
}

// GetBearer returns the Bearer field value if set, zero value otherwise.
func (o *TransactionChargeAuthorization) GetBearer() string {
	if o == nil || IsNil(o.Bearer) {
		var ret string
		return ret
	}
	return *o.Bearer
}

// GetBearerOk returns a tuple with the Bearer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionChargeAuthorization) GetBearerOk() (*string, bool) {
	if o == nil || IsNil(o.Bearer) {
		return nil, false
	}
	return o.Bearer, true
}

// HasBearer returns a boolean if a field has been set.
func (o *TransactionChargeAuthorization) HasBearer() bool {
	if o != nil && !IsNil(o.Bearer) {
		return true
	}

	return false
}

// SetBearer gets a reference to the given string and assigns it to the Bearer field.
func (o *TransactionChargeAuthorization) SetBearer(v string) {
	o.Bearer = &v
}

// GetQueue returns the Queue field value if set, zero value otherwise.
func (o *TransactionChargeAuthorization) GetQueue() bool {
	if o == nil || IsNil(o.Queue) {
		var ret bool
		return ret
	}
	return *o.Queue
}

// GetQueueOk returns a tuple with the Queue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionChargeAuthorization) GetQueueOk() (*bool, bool) {
	if o == nil || IsNil(o.Queue) {
		return nil, false
	}
	return o.Queue, true
}

// HasQueue returns a boolean if a field has been set.
func (o *TransactionChargeAuthorization) HasQueue() bool {
	if o != nil && !IsNil(o.Queue) {
		return true
	}

	return false
}

// SetQueue gets a reference to the given bool and assigns it to the Queue field.
func (o *TransactionChargeAuthorization) SetQueue(v bool) {
	o.Queue = &v
}

func (o TransactionChargeAuthorization) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionChargeAuthorization) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["email"] = o.Email
	toSerialize["amount"] = o.Amount
	toSerialize["authorization_code"] = o.AuthorizationCode
	if !IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.SplitCode) {
		toSerialize["split_code"] = o.SplitCode
	}
	if !IsNil(o.Subaccount) {
		toSerialize["subaccount"] = o.Subaccount
	}
	if !IsNil(o.TransactionCharge) {
		toSerialize["transaction_charge"] = o.TransactionCharge
	}
	if !IsNil(o.Bearer) {
		toSerialize["bearer"] = o.Bearer
	}
	if !IsNil(o.Queue) {
		toSerialize["queue"] = o.Queue
	}
	return toSerialize, nil
}

func (o *TransactionChargeAuthorization) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"email",
		"amount",
		"authorization_code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionChargeAuthorization := _TransactionChargeAuthorization{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionChargeAuthorization)

	if err != nil {
		return err
	}

	*o = TransactionChargeAuthorization(varTransactionChargeAuthorization)

	return err
}

type NullableTransactionChargeAuthorization struct {
	value *TransactionChargeAuthorization
	isSet bool
}

func (v NullableTransactionChargeAuthorization) Get() *TransactionChargeAuthorization {
	return v.value
}

func (v *NullableTransactionChargeAuthorization) Set(val *TransactionChargeAuthorization) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionChargeAuthorization) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionChargeAuthorization) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionChargeAuthorization(val *TransactionChargeAuthorization) *NullableTransactionChargeAuthorization {
	return &NullableTransactionChargeAuthorization{value: val, isSet: true}
}

func (v NullableTransactionChargeAuthorization) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionChargeAuthorization) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


