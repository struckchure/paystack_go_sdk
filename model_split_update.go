/*
Paystack

The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.

API version: 1.0.0
Contact: techsupport@paystack.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paystack

import (
	"encoding/json"
)

// checks if the SplitUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SplitUpdate{}

// SplitUpdate struct for SplitUpdate
type SplitUpdate struct {
	// Name of the transaction split
	Name *string `json:"name,omitempty"`
	// Toggle status of split. When true, the split is active, else it's inactive
	Active *bool `json:"active,omitempty"`
	// This allows you specify how the transaction charge should be processed
	BearerType *string `json:"bearer_type,omitempty"`
	// This is the subaccount code of the customer or partner that would bear the transaction charge if you specified subaccount as the bearer type
	BearerSubaccount *string `json:"bearer_subaccount,omitempty"`
}

// NewSplitUpdate instantiates a new SplitUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSplitUpdate() *SplitUpdate {
	this := SplitUpdate{}
	return &this
}

// NewSplitUpdateWithDefaults instantiates a new SplitUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSplitUpdateWithDefaults() *SplitUpdate {
	this := SplitUpdate{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SplitUpdate) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SplitUpdate) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SplitUpdate) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SplitUpdate) SetName(v string) {
	o.Name = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *SplitUpdate) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SplitUpdate) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *SplitUpdate) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *SplitUpdate) SetActive(v bool) {
	o.Active = &v
}

// GetBearerType returns the BearerType field value if set, zero value otherwise.
func (o *SplitUpdate) GetBearerType() string {
	if o == nil || IsNil(o.BearerType) {
		var ret string
		return ret
	}
	return *o.BearerType
}

// GetBearerTypeOk returns a tuple with the BearerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SplitUpdate) GetBearerTypeOk() (*string, bool) {
	if o == nil || IsNil(o.BearerType) {
		return nil, false
	}
	return o.BearerType, true
}

// HasBearerType returns a boolean if a field has been set.
func (o *SplitUpdate) HasBearerType() bool {
	if o != nil && !IsNil(o.BearerType) {
		return true
	}

	return false
}

// SetBearerType gets a reference to the given string and assigns it to the BearerType field.
func (o *SplitUpdate) SetBearerType(v string) {
	o.BearerType = &v
}

// GetBearerSubaccount returns the BearerSubaccount field value if set, zero value otherwise.
func (o *SplitUpdate) GetBearerSubaccount() string {
	if o == nil || IsNil(o.BearerSubaccount) {
		var ret string
		return ret
	}
	return *o.BearerSubaccount
}

// GetBearerSubaccountOk returns a tuple with the BearerSubaccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SplitUpdate) GetBearerSubaccountOk() (*string, bool) {
	if o == nil || IsNil(o.BearerSubaccount) {
		return nil, false
	}
	return o.BearerSubaccount, true
}

// HasBearerSubaccount returns a boolean if a field has been set.
func (o *SplitUpdate) HasBearerSubaccount() bool {
	if o != nil && !IsNil(o.BearerSubaccount) {
		return true
	}

	return false
}

// SetBearerSubaccount gets a reference to the given string and assigns it to the BearerSubaccount field.
func (o *SplitUpdate) SetBearerSubaccount(v string) {
	o.BearerSubaccount = &v
}

func (o SplitUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SplitUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.BearerType) {
		toSerialize["bearer_type"] = o.BearerType
	}
	if !IsNil(o.BearerSubaccount) {
		toSerialize["bearer_subaccount"] = o.BearerSubaccount
	}
	return toSerialize, nil
}

type NullableSplitUpdate struct {
	value *SplitUpdate
	isSet bool
}

func (v NullableSplitUpdate) Get() *SplitUpdate {
	return v.value
}

func (v *NullableSplitUpdate) Set(val *SplitUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableSplitUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableSplitUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSplitUpdate(val *SplitUpdate) *NullableSplitUpdate {
	return &NullableSplitUpdate{value: val, isSet: true}
}

func (v NullableSplitUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSplitUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


