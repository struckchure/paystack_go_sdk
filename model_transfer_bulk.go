/*
Paystack

The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.

API version: 1.0.0
Contact: techsupport@paystack.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paystack

import (
	"encoding/json"
)

// checks if the TransferBulk type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransferBulk{}

// TransferBulk struct for TransferBulk
type TransferBulk struct {
	// Where should we transfer from? Only balance is allowed for now
	Source *string `json:"source,omitempty"`
	// A list of transfer object. Each object should contain amount, recipient, and reference
	Transfers []TransferInitiate `json:"transfers,omitempty"`
}

// NewTransferBulk instantiates a new TransferBulk object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransferBulk() *TransferBulk {
	this := TransferBulk{}
	return &this
}

// NewTransferBulkWithDefaults instantiates a new TransferBulk object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransferBulkWithDefaults() *TransferBulk {
	this := TransferBulk{}
	return &this
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *TransferBulk) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferBulk) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *TransferBulk) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *TransferBulk) SetSource(v string) {
	o.Source = &v
}

// GetTransfers returns the Transfers field value if set, zero value otherwise.
func (o *TransferBulk) GetTransfers() []TransferInitiate {
	if o == nil || IsNil(o.Transfers) {
		var ret []TransferInitiate
		return ret
	}
	return o.Transfers
}

// GetTransfersOk returns a tuple with the Transfers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferBulk) GetTransfersOk() ([]TransferInitiate, bool) {
	if o == nil || IsNil(o.Transfers) {
		return nil, false
	}
	return o.Transfers, true
}

// HasTransfers returns a boolean if a field has been set.
func (o *TransferBulk) HasTransfers() bool {
	if o != nil && !IsNil(o.Transfers) {
		return true
	}

	return false
}

// SetTransfers gets a reference to the given []TransferInitiate and assigns it to the Transfers field.
func (o *TransferBulk) SetTransfers(v []TransferInitiate) {
	o.Transfers = v
}

func (o TransferBulk) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransferBulk) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Transfers) {
		toSerialize["transfers"] = o.Transfers
	}
	return toSerialize, nil
}

type NullableTransferBulk struct {
	value *TransferBulk
	isSet bool
}

func (v NullableTransferBulk) Get() *TransferBulk {
	return v.value
}

func (v *NullableTransferBulk) Set(val *TransferBulk) {
	v.value = val
	v.isSet = true
}

func (v NullableTransferBulk) IsSet() bool {
	return v.isSet
}

func (v *NullableTransferBulk) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransferBulk(val *TransferBulk) *NullableTransferBulk {
	return &NullableTransferBulk{value: val, isSet: true}
}

func (v NullableTransferBulk) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransferBulk) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


