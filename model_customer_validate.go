/*
Paystack

The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.

API version: 1.0.0
Contact: techsupport@paystack.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paystack

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CustomerValidate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomerValidate{}

// CustomerValidate struct for CustomerValidate
type CustomerValidate struct {
	// Customer's first name
	FirstName string `json:"first_name"`
	// Customer's last name
	LastName string `json:"last_name"`
	// Predefined types of identification. e.g. (BVN)
	Type string `json:"type"`
	// Customer's identification number
	Value string `json:"value"`
	// 2 letter country code of identification issuer
	Country string `json:"country"`
}

type _CustomerValidate CustomerValidate

// NewCustomerValidate instantiates a new CustomerValidate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomerValidate(firstName string, lastName string, type_ string, value string, country string) *CustomerValidate {
	this := CustomerValidate{}
	this.FirstName = firstName
	this.LastName = lastName
	this.Type = type_
	this.Value = value
	this.Country = country
	return &this
}

// NewCustomerValidateWithDefaults instantiates a new CustomerValidate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomerValidateWithDefaults() *CustomerValidate {
	this := CustomerValidate{}
	return &this
}

// GetFirstName returns the FirstName field value
func (o *CustomerValidate) GetFirstName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value
// and a boolean to check if the value has been set.
func (o *CustomerValidate) GetFirstNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstName, true
}

// SetFirstName sets field value
func (o *CustomerValidate) SetFirstName(v string) {
	o.FirstName = v
}

// GetLastName returns the LastName field value
func (o *CustomerValidate) GetLastName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value
// and a boolean to check if the value has been set.
func (o *CustomerValidate) GetLastNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastName, true
}

// SetLastName sets field value
func (o *CustomerValidate) SetLastName(v string) {
	o.LastName = v
}

// GetType returns the Type field value
func (o *CustomerValidate) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CustomerValidate) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CustomerValidate) SetType(v string) {
	o.Type = v
}

// GetValue returns the Value field value
func (o *CustomerValidate) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *CustomerValidate) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *CustomerValidate) SetValue(v string) {
	o.Value = v
}

// GetCountry returns the Country field value
func (o *CustomerValidate) GetCountry() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *CustomerValidate) GetCountryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Country, true
}

// SetCountry sets field value
func (o *CustomerValidate) SetCountry(v string) {
	o.Country = v
}

func (o CustomerValidate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomerValidate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["first_name"] = o.FirstName
	toSerialize["last_name"] = o.LastName
	toSerialize["type"] = o.Type
	toSerialize["value"] = o.Value
	toSerialize["country"] = o.Country
	return toSerialize, nil
}

func (o *CustomerValidate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"first_name",
		"last_name",
		"type",
		"value",
		"country",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomerValidate := _CustomerValidate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCustomerValidate)

	if err != nil {
		return err
	}

	*o = CustomerValidate(varCustomerValidate)

	return err
}

type NullableCustomerValidate struct {
	value *CustomerValidate
	isSet bool
}

func (v NullableCustomerValidate) Get() *CustomerValidate {
	return v.value
}

func (v *NullableCustomerValidate) Set(val *CustomerValidate) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerValidate) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerValidate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerValidate(val *CustomerValidate) *NullableCustomerValidate {
	return &NullableCustomerValidate{value: val, isSet: true}
}

func (v NullableCustomerValidate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerValidate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


