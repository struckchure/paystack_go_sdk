/*
Paystack

The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.

API version: 1.0.0
Contact: techsupport@paystack.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paystack

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PlanCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlanCreate{}

// PlanCreate struct for PlanCreate
type PlanCreate struct {
	// Name of plan
	Name string `json:"name"`
	// Amount should be in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR
	Amount int32 `json:"amount"`
	// Interval in words. Valid intervals are daily, weekly, monthly,biannually, annually
	Interval string `json:"interval"`
	// A description for this plan
	Description *string `json:"description,omitempty"`
	// Set to false if you don't want invoices to be sent to your customers
	SendInvoices *bool `json:"send_invoices,omitempty"`
	// Set to false if you don't want text messages to be sent to your customers
	SendSms *bool `json:"send_sms,omitempty"`
	// Currency in which amount is set. Allowed values are NGN, GHS, ZAR or USD
	Currency *string `json:"currency,omitempty"`
	// Number of invoices to raise during subscription to this plan.  Can be overridden by specifying an invoice_limit while subscribing.
	InvoiceLimit *int32 `json:"invoice_limit,omitempty"`
}

type _PlanCreate PlanCreate

// NewPlanCreate instantiates a new PlanCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanCreate(name string, amount int32, interval string) *PlanCreate {
	this := PlanCreate{}
	this.Name = name
	this.Amount = amount
	this.Interval = interval
	return &this
}

// NewPlanCreateWithDefaults instantiates a new PlanCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanCreateWithDefaults() *PlanCreate {
	this := PlanCreate{}
	return &this
}

// GetName returns the Name field value
func (o *PlanCreate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PlanCreate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PlanCreate) SetName(v string) {
	o.Name = v
}

// GetAmount returns the Amount field value
func (o *PlanCreate) GetAmount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *PlanCreate) GetAmountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *PlanCreate) SetAmount(v int32) {
	o.Amount = v
}

// GetInterval returns the Interval field value
func (o *PlanCreate) GetInterval() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value
// and a boolean to check if the value has been set.
func (o *PlanCreate) GetIntervalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Interval, true
}

// SetInterval sets field value
func (o *PlanCreate) SetInterval(v string) {
	o.Interval = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PlanCreate) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanCreate) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PlanCreate) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PlanCreate) SetDescription(v string) {
	o.Description = &v
}

// GetSendInvoices returns the SendInvoices field value if set, zero value otherwise.
func (o *PlanCreate) GetSendInvoices() bool {
	if o == nil || IsNil(o.SendInvoices) {
		var ret bool
		return ret
	}
	return *o.SendInvoices
}

// GetSendInvoicesOk returns a tuple with the SendInvoices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanCreate) GetSendInvoicesOk() (*bool, bool) {
	if o == nil || IsNil(o.SendInvoices) {
		return nil, false
	}
	return o.SendInvoices, true
}

// HasSendInvoices returns a boolean if a field has been set.
func (o *PlanCreate) HasSendInvoices() bool {
	if o != nil && !IsNil(o.SendInvoices) {
		return true
	}

	return false
}

// SetSendInvoices gets a reference to the given bool and assigns it to the SendInvoices field.
func (o *PlanCreate) SetSendInvoices(v bool) {
	o.SendInvoices = &v
}

// GetSendSms returns the SendSms field value if set, zero value otherwise.
func (o *PlanCreate) GetSendSms() bool {
	if o == nil || IsNil(o.SendSms) {
		var ret bool
		return ret
	}
	return *o.SendSms
}

// GetSendSmsOk returns a tuple with the SendSms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanCreate) GetSendSmsOk() (*bool, bool) {
	if o == nil || IsNil(o.SendSms) {
		return nil, false
	}
	return o.SendSms, true
}

// HasSendSms returns a boolean if a field has been set.
func (o *PlanCreate) HasSendSms() bool {
	if o != nil && !IsNil(o.SendSms) {
		return true
	}

	return false
}

// SetSendSms gets a reference to the given bool and assigns it to the SendSms field.
func (o *PlanCreate) SetSendSms(v bool) {
	o.SendSms = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *PlanCreate) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanCreate) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *PlanCreate) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *PlanCreate) SetCurrency(v string) {
	o.Currency = &v
}

// GetInvoiceLimit returns the InvoiceLimit field value if set, zero value otherwise.
func (o *PlanCreate) GetInvoiceLimit() int32 {
	if o == nil || IsNil(o.InvoiceLimit) {
		var ret int32
		return ret
	}
	return *o.InvoiceLimit
}

// GetInvoiceLimitOk returns a tuple with the InvoiceLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanCreate) GetInvoiceLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.InvoiceLimit) {
		return nil, false
	}
	return o.InvoiceLimit, true
}

// HasInvoiceLimit returns a boolean if a field has been set.
func (o *PlanCreate) HasInvoiceLimit() bool {
	if o != nil && !IsNil(o.InvoiceLimit) {
		return true
	}

	return false
}

// SetInvoiceLimit gets a reference to the given int32 and assigns it to the InvoiceLimit field.
func (o *PlanCreate) SetInvoiceLimit(v int32) {
	o.InvoiceLimit = &v
}

func (o PlanCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlanCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["amount"] = o.Amount
	toSerialize["interval"] = o.Interval
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.SendInvoices) {
		toSerialize["send_invoices"] = o.SendInvoices
	}
	if !IsNil(o.SendSms) {
		toSerialize["send_sms"] = o.SendSms
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.InvoiceLimit) {
		toSerialize["invoice_limit"] = o.InvoiceLimit
	}
	return toSerialize, nil
}

func (o *PlanCreate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"amount",
		"interval",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPlanCreate := _PlanCreate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPlanCreate)

	if err != nil {
		return err
	}

	*o = PlanCreate(varPlanCreate)

	return err
}

type NullablePlanCreate struct {
	value *PlanCreate
	isSet bool
}

func (v NullablePlanCreate) Get() *PlanCreate {
	return v.value
}

func (v *NullablePlanCreate) Set(val *PlanCreate) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanCreate) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanCreate(val *PlanCreate) *NullablePlanCreate {
	return &NullablePlanCreate{value: val, isSet: true}
}

func (v NullablePlanCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


