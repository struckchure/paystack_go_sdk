/*
Paystack

The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.

API version: 1.0.0
Contact: techsupport@paystack.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paystack

import (
	"encoding/json"
)

// checks if the USSD type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &USSD{}

// USSD struct for USSD
type USSD struct {
	// The three-digit USSD code. One of, 737, 919, 822, 966
	Type *string `json:"type,omitempty"`
}

// NewUSSD instantiates a new USSD object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUSSD() *USSD {
	this := USSD{}
	return &this
}

// NewUSSDWithDefaults instantiates a new USSD object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUSSDWithDefaults() *USSD {
	this := USSD{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *USSD) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *USSD) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *USSD) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *USSD) SetType(v string) {
	o.Type = &v
}

func (o USSD) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o USSD) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableUSSD struct {
	value *USSD
	isSet bool
}

func (v NullableUSSD) Get() *USSD {
	return v.value
}

func (v *NullableUSSD) Set(val *USSD) {
	v.value = val
	v.isSet = true
}

func (v NullableUSSD) IsSet() bool {
	return v.isSet
}

func (v *NullableUSSD) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUSSD(val *USSD) *NullableUSSD {
	return &NullableUSSD{value: val, isSet: true}
}

func (v NullableUSSD) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUSSD) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


