/*
Paystack

The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.

API version: 1.0.0
Contact: techsupport@paystack.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paystack

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PageProduct type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PageProduct{}

// PageProduct struct for PageProduct
type PageProduct struct {
	// IDs of all products to add to a page
	Product []string `json:"product"`
}

type _PageProduct PageProduct

// NewPageProduct instantiates a new PageProduct object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPageProduct(product []string) *PageProduct {
	this := PageProduct{}
	this.Product = product
	return &this
}

// NewPageProductWithDefaults instantiates a new PageProduct object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPageProductWithDefaults() *PageProduct {
	this := PageProduct{}
	return &this
}

// GetProduct returns the Product field value
func (o *PageProduct) GetProduct() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Product
}

// GetProductOk returns a tuple with the Product field value
// and a boolean to check if the value has been set.
func (o *PageProduct) GetProductOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Product, true
}

// SetProduct sets field value
func (o *PageProduct) SetProduct(v []string) {
	o.Product = v
}

func (o PageProduct) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PageProduct) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["product"] = o.Product
	return toSerialize, nil
}

func (o *PageProduct) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"product",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPageProduct := _PageProduct{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPageProduct)

	if err != nil {
		return err
	}

	*o = PageProduct(varPageProduct)

	return err
}

type NullablePageProduct struct {
	value *PageProduct
	isSet bool
}

func (v NullablePageProduct) Get() *PageProduct {
	return v.value
}

func (v *NullablePageProduct) Set(val *PageProduct) {
	v.value = val
	v.isSet = true
}

func (v NullablePageProduct) IsSet() bool {
	return v.isSet
}

func (v *NullablePageProduct) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePageProduct(val *PageProduct) *NullablePageProduct {
	return &NullablePageProduct{value: val, isSet: true}
}

func (v NullablePageProduct) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePageProduct) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


