/*
Paystack

The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.

API version: 1.0.0
Contact: techsupport@paystack.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paystack

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TransactionCheckAuthorization type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionCheckAuthorization{}

// TransactionCheckAuthorization struct for TransactionCheckAuthorization
type TransactionCheckAuthorization struct {
	// Customer's email address
	Email string `json:"email"`
	// Amount should be in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR
	Amount int32 `json:"amount"`
	// Valid authorization code to charge
	AuthorizationCode *string `json:"authorization_code,omitempty"`
	// The transaction currency
	Currency *string `json:"currency,omitempty"`
}

type _TransactionCheckAuthorization TransactionCheckAuthorization

// NewTransactionCheckAuthorization instantiates a new TransactionCheckAuthorization object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionCheckAuthorization(email string, amount int32) *TransactionCheckAuthorization {
	this := TransactionCheckAuthorization{}
	this.Email = email
	this.Amount = amount
	return &this
}

// NewTransactionCheckAuthorizationWithDefaults instantiates a new TransactionCheckAuthorization object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionCheckAuthorizationWithDefaults() *TransactionCheckAuthorization {
	this := TransactionCheckAuthorization{}
	return &this
}

// GetEmail returns the Email field value
func (o *TransactionCheckAuthorization) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *TransactionCheckAuthorization) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *TransactionCheckAuthorization) SetEmail(v string) {
	o.Email = v
}

// GetAmount returns the Amount field value
func (o *TransactionCheckAuthorization) GetAmount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *TransactionCheckAuthorization) GetAmountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *TransactionCheckAuthorization) SetAmount(v int32) {
	o.Amount = v
}

// GetAuthorizationCode returns the AuthorizationCode field value if set, zero value otherwise.
func (o *TransactionCheckAuthorization) GetAuthorizationCode() string {
	if o == nil || IsNil(o.AuthorizationCode) {
		var ret string
		return ret
	}
	return *o.AuthorizationCode
}

// GetAuthorizationCodeOk returns a tuple with the AuthorizationCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionCheckAuthorization) GetAuthorizationCodeOk() (*string, bool) {
	if o == nil || IsNil(o.AuthorizationCode) {
		return nil, false
	}
	return o.AuthorizationCode, true
}

// HasAuthorizationCode returns a boolean if a field has been set.
func (o *TransactionCheckAuthorization) HasAuthorizationCode() bool {
	if o != nil && !IsNil(o.AuthorizationCode) {
		return true
	}

	return false
}

// SetAuthorizationCode gets a reference to the given string and assigns it to the AuthorizationCode field.
func (o *TransactionCheckAuthorization) SetAuthorizationCode(v string) {
	o.AuthorizationCode = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *TransactionCheckAuthorization) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionCheckAuthorization) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *TransactionCheckAuthorization) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *TransactionCheckAuthorization) SetCurrency(v string) {
	o.Currency = &v
}

func (o TransactionCheckAuthorization) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionCheckAuthorization) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["email"] = o.Email
	toSerialize["amount"] = o.Amount
	if !IsNil(o.AuthorizationCode) {
		toSerialize["authorization_code"] = o.AuthorizationCode
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	return toSerialize, nil
}

func (o *TransactionCheckAuthorization) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"email",
		"amount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionCheckAuthorization := _TransactionCheckAuthorization{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionCheckAuthorization)

	if err != nil {
		return err
	}

	*o = TransactionCheckAuthorization(varTransactionCheckAuthorization)

	return err
}

type NullableTransactionCheckAuthorization struct {
	value *TransactionCheckAuthorization
	isSet bool
}

func (v NullableTransactionCheckAuthorization) Get() *TransactionCheckAuthorization {
	return v.value
}

func (v *NullableTransactionCheckAuthorization) Set(val *TransactionCheckAuthorization) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionCheckAuthorization) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionCheckAuthorization) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionCheckAuthorization(val *TransactionCheckAuthorization) *NullableTransactionCheckAuthorization {
	return &NullableTransactionCheckAuthorization{value: val, isSet: true}
}

func (v NullableTransactionCheckAuthorization) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionCheckAuthorization) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


