/*
Paystack

The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.

API version: 1.0.0
Contact: techsupport@paystack.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paystack

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TransactionInitialize type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionInitialize{}

// TransactionInitialize struct for TransactionInitialize
type TransactionInitialize struct {
	// Customer's email address
	Email string `json:"email"`
	// Amount should be in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR
	Amount int32 `json:"amount"`
	// The transaction currency
	Currency *string `json:"currency,omitempty"`
	// Unique transaction reference. Only -, ., = and alphanumeric characters allowed.
	Reference *string `json:"reference,omitempty"`
	// Fully qualified url, e.g. https://example.com/ . Use this to override the callback url provided on the dashboard for this transaction
	CallbackUrl *string `json:"callback_url,omitempty"`
	// If transaction is to create a subscription to a predefined plan, provide plan code here.  This would invalidate the value provided in amount
	Plan *string `json:"plan,omitempty"`
	// Number of times to charge customer during subscription to plan
	InvoiceLimit *int32 `json:"invoice_limit,omitempty"`
	// Stringified JSON object of custom data
	Metadata *string `json:"metadata,omitempty"`
	// An array of payment channels to control what channels you want to make available to the user to make a payment with
	Channels []string `json:"channels,omitempty"`
	// The split code of the transaction split
	SplitCode *string `json:"split_code,omitempty"`
	// The code for the subaccount that owns the payment
	Subaccount *string `json:"subaccount,omitempty"`
	// A flat fee to charge the subaccount for a transaction.  This overrides the split percentage set when the subaccount was created
	TransactionCharge *string `json:"transaction_charge,omitempty"`
	// The beare of the transaction charge
	Bearer *string `json:"bearer,omitempty"`
}

type _TransactionInitialize TransactionInitialize

// NewTransactionInitialize instantiates a new TransactionInitialize object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionInitialize(email string, amount int32) *TransactionInitialize {
	this := TransactionInitialize{}
	this.Email = email
	this.Amount = amount
	return &this
}

// NewTransactionInitializeWithDefaults instantiates a new TransactionInitialize object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionInitializeWithDefaults() *TransactionInitialize {
	this := TransactionInitialize{}
	return &this
}

// GetEmail returns the Email field value
func (o *TransactionInitialize) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *TransactionInitialize) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *TransactionInitialize) SetEmail(v string) {
	o.Email = v
}

// GetAmount returns the Amount field value
func (o *TransactionInitialize) GetAmount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *TransactionInitialize) GetAmountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *TransactionInitialize) SetAmount(v int32) {
	o.Amount = v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *TransactionInitialize) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionInitialize) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *TransactionInitialize) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *TransactionInitialize) SetCurrency(v string) {
	o.Currency = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *TransactionInitialize) GetReference() string {
	if o == nil || IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionInitialize) GetReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *TransactionInitialize) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *TransactionInitialize) SetReference(v string) {
	o.Reference = &v
}

// GetCallbackUrl returns the CallbackUrl field value if set, zero value otherwise.
func (o *TransactionInitialize) GetCallbackUrl() string {
	if o == nil || IsNil(o.CallbackUrl) {
		var ret string
		return ret
	}
	return *o.CallbackUrl
}

// GetCallbackUrlOk returns a tuple with the CallbackUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionInitialize) GetCallbackUrlOk() (*string, bool) {
	if o == nil || IsNil(o.CallbackUrl) {
		return nil, false
	}
	return o.CallbackUrl, true
}

// HasCallbackUrl returns a boolean if a field has been set.
func (o *TransactionInitialize) HasCallbackUrl() bool {
	if o != nil && !IsNil(o.CallbackUrl) {
		return true
	}

	return false
}

// SetCallbackUrl gets a reference to the given string and assigns it to the CallbackUrl field.
func (o *TransactionInitialize) SetCallbackUrl(v string) {
	o.CallbackUrl = &v
}

// GetPlan returns the Plan field value if set, zero value otherwise.
func (o *TransactionInitialize) GetPlan() string {
	if o == nil || IsNil(o.Plan) {
		var ret string
		return ret
	}
	return *o.Plan
}

// GetPlanOk returns a tuple with the Plan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionInitialize) GetPlanOk() (*string, bool) {
	if o == nil || IsNil(o.Plan) {
		return nil, false
	}
	return o.Plan, true
}

// HasPlan returns a boolean if a field has been set.
func (o *TransactionInitialize) HasPlan() bool {
	if o != nil && !IsNil(o.Plan) {
		return true
	}

	return false
}

// SetPlan gets a reference to the given string and assigns it to the Plan field.
func (o *TransactionInitialize) SetPlan(v string) {
	o.Plan = &v
}

// GetInvoiceLimit returns the InvoiceLimit field value if set, zero value otherwise.
func (o *TransactionInitialize) GetInvoiceLimit() int32 {
	if o == nil || IsNil(o.InvoiceLimit) {
		var ret int32
		return ret
	}
	return *o.InvoiceLimit
}

// GetInvoiceLimitOk returns a tuple with the InvoiceLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionInitialize) GetInvoiceLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.InvoiceLimit) {
		return nil, false
	}
	return o.InvoiceLimit, true
}

// HasInvoiceLimit returns a boolean if a field has been set.
func (o *TransactionInitialize) HasInvoiceLimit() bool {
	if o != nil && !IsNil(o.InvoiceLimit) {
		return true
	}

	return false
}

// SetInvoiceLimit gets a reference to the given int32 and assigns it to the InvoiceLimit field.
func (o *TransactionInitialize) SetInvoiceLimit(v int32) {
	o.InvoiceLimit = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *TransactionInitialize) GetMetadata() string {
	if o == nil || IsNil(o.Metadata) {
		var ret string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionInitialize) GetMetadataOk() (*string, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *TransactionInitialize) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given string and assigns it to the Metadata field.
func (o *TransactionInitialize) SetMetadata(v string) {
	o.Metadata = &v
}

// GetChannels returns the Channels field value if set, zero value otherwise.
func (o *TransactionInitialize) GetChannels() []string {
	if o == nil || IsNil(o.Channels) {
		var ret []string
		return ret
	}
	return o.Channels
}

// GetChannelsOk returns a tuple with the Channels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionInitialize) GetChannelsOk() ([]string, bool) {
	if o == nil || IsNil(o.Channels) {
		return nil, false
	}
	return o.Channels, true
}

// HasChannels returns a boolean if a field has been set.
func (o *TransactionInitialize) HasChannels() bool {
	if o != nil && !IsNil(o.Channels) {
		return true
	}

	return false
}

// SetChannels gets a reference to the given []string and assigns it to the Channels field.
func (o *TransactionInitialize) SetChannels(v []string) {
	o.Channels = v
}

// GetSplitCode returns the SplitCode field value if set, zero value otherwise.
func (o *TransactionInitialize) GetSplitCode() string {
	if o == nil || IsNil(o.SplitCode) {
		var ret string
		return ret
	}
	return *o.SplitCode
}

// GetSplitCodeOk returns a tuple with the SplitCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionInitialize) GetSplitCodeOk() (*string, bool) {
	if o == nil || IsNil(o.SplitCode) {
		return nil, false
	}
	return o.SplitCode, true
}

// HasSplitCode returns a boolean if a field has been set.
func (o *TransactionInitialize) HasSplitCode() bool {
	if o != nil && !IsNil(o.SplitCode) {
		return true
	}

	return false
}

// SetSplitCode gets a reference to the given string and assigns it to the SplitCode field.
func (o *TransactionInitialize) SetSplitCode(v string) {
	o.SplitCode = &v
}

// GetSubaccount returns the Subaccount field value if set, zero value otherwise.
func (o *TransactionInitialize) GetSubaccount() string {
	if o == nil || IsNil(o.Subaccount) {
		var ret string
		return ret
	}
	return *o.Subaccount
}

// GetSubaccountOk returns a tuple with the Subaccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionInitialize) GetSubaccountOk() (*string, bool) {
	if o == nil || IsNil(o.Subaccount) {
		return nil, false
	}
	return o.Subaccount, true
}

// HasSubaccount returns a boolean if a field has been set.
func (o *TransactionInitialize) HasSubaccount() bool {
	if o != nil && !IsNil(o.Subaccount) {
		return true
	}

	return false
}

// SetSubaccount gets a reference to the given string and assigns it to the Subaccount field.
func (o *TransactionInitialize) SetSubaccount(v string) {
	o.Subaccount = &v
}

// GetTransactionCharge returns the TransactionCharge field value if set, zero value otherwise.
func (o *TransactionInitialize) GetTransactionCharge() string {
	if o == nil || IsNil(o.TransactionCharge) {
		var ret string
		return ret
	}
	return *o.TransactionCharge
}

// GetTransactionChargeOk returns a tuple with the TransactionCharge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionInitialize) GetTransactionChargeOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionCharge) {
		return nil, false
	}
	return o.TransactionCharge, true
}

// HasTransactionCharge returns a boolean if a field has been set.
func (o *TransactionInitialize) HasTransactionCharge() bool {
	if o != nil && !IsNil(o.TransactionCharge) {
		return true
	}

	return false
}

// SetTransactionCharge gets a reference to the given string and assigns it to the TransactionCharge field.
func (o *TransactionInitialize) SetTransactionCharge(v string) {
	o.TransactionCharge = &v
}

// GetBearer returns the Bearer field value if set, zero value otherwise.
func (o *TransactionInitialize) GetBearer() string {
	if o == nil || IsNil(o.Bearer) {
		var ret string
		return ret
	}
	return *o.Bearer
}

// GetBearerOk returns a tuple with the Bearer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionInitialize) GetBearerOk() (*string, bool) {
	if o == nil || IsNil(o.Bearer) {
		return nil, false
	}
	return o.Bearer, true
}

// HasBearer returns a boolean if a field has been set.
func (o *TransactionInitialize) HasBearer() bool {
	if o != nil && !IsNil(o.Bearer) {
		return true
	}

	return false
}

// SetBearer gets a reference to the given string and assigns it to the Bearer field.
func (o *TransactionInitialize) SetBearer(v string) {
	o.Bearer = &v
}

func (o TransactionInitialize) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionInitialize) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["email"] = o.Email
	toSerialize["amount"] = o.Amount
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	if !IsNil(o.CallbackUrl) {
		toSerialize["callback_url"] = o.CallbackUrl
	}
	if !IsNil(o.Plan) {
		toSerialize["plan"] = o.Plan
	}
	if !IsNil(o.InvoiceLimit) {
		toSerialize["invoice_limit"] = o.InvoiceLimit
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Channels) {
		toSerialize["channels"] = o.Channels
	}
	if !IsNil(o.SplitCode) {
		toSerialize["split_code"] = o.SplitCode
	}
	if !IsNil(o.Subaccount) {
		toSerialize["subaccount"] = o.Subaccount
	}
	if !IsNil(o.TransactionCharge) {
		toSerialize["transaction_charge"] = o.TransactionCharge
	}
	if !IsNil(o.Bearer) {
		toSerialize["bearer"] = o.Bearer
	}
	return toSerialize, nil
}

func (o *TransactionInitialize) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"email",
		"amount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionInitialize := _TransactionInitialize{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionInitialize)

	if err != nil {
		return err
	}

	*o = TransactionInitialize(varTransactionInitialize)

	return err
}

type NullableTransactionInitialize struct {
	value *TransactionInitialize
	isSet bool
}

func (v NullableTransactionInitialize) Get() *TransactionInitialize {
	return v.value
}

func (v *NullableTransactionInitialize) Set(val *TransactionInitialize) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionInitialize) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionInitialize) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionInitialize(val *TransactionInitialize) *NullableTransactionInitialize {
	return &NullableTransactionInitialize{value: val, isSet: true}
}

func (v NullableTransactionInitialize) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionInitialize) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


