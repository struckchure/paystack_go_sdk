/*
Paystack

The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.

API version: 1.0.0
Contact: techsupport@paystack.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paystack

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the DisputeEvidence type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DisputeEvidence{}

// DisputeEvidence struct for DisputeEvidence
type DisputeEvidence struct {
	// Customer email
	CustomerEmail string `json:"customer_email"`
	// Customer name
	CustomerName string `json:"customer_name"`
	// Customer mobile number
	CustomerPhone string `json:"customer_phone"`
	// Details of service offered
	ServiceDetails string `json:"service_details"`
	// Delivery address
	DeliveryAddress *string `json:"delivery_address,omitempty"`
	// ISO 8601 representation of delivery date (YYYY-MM-DD)
	DeliveryDate *time.Time `json:"delivery_date,omitempty"`
}

type _DisputeEvidence DisputeEvidence

// NewDisputeEvidence instantiates a new DisputeEvidence object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDisputeEvidence(customerEmail string, customerName string, customerPhone string, serviceDetails string) *DisputeEvidence {
	this := DisputeEvidence{}
	this.CustomerEmail = customerEmail
	this.CustomerName = customerName
	this.CustomerPhone = customerPhone
	this.ServiceDetails = serviceDetails
	return &this
}

// NewDisputeEvidenceWithDefaults instantiates a new DisputeEvidence object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDisputeEvidenceWithDefaults() *DisputeEvidence {
	this := DisputeEvidence{}
	return &this
}

// GetCustomerEmail returns the CustomerEmail field value
func (o *DisputeEvidence) GetCustomerEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CustomerEmail
}

// GetCustomerEmailOk returns a tuple with the CustomerEmail field value
// and a boolean to check if the value has been set.
func (o *DisputeEvidence) GetCustomerEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomerEmail, true
}

// SetCustomerEmail sets field value
func (o *DisputeEvidence) SetCustomerEmail(v string) {
	o.CustomerEmail = v
}

// GetCustomerName returns the CustomerName field value
func (o *DisputeEvidence) GetCustomerName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CustomerName
}

// GetCustomerNameOk returns a tuple with the CustomerName field value
// and a boolean to check if the value has been set.
func (o *DisputeEvidence) GetCustomerNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomerName, true
}

// SetCustomerName sets field value
func (o *DisputeEvidence) SetCustomerName(v string) {
	o.CustomerName = v
}

// GetCustomerPhone returns the CustomerPhone field value
func (o *DisputeEvidence) GetCustomerPhone() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CustomerPhone
}

// GetCustomerPhoneOk returns a tuple with the CustomerPhone field value
// and a boolean to check if the value has been set.
func (o *DisputeEvidence) GetCustomerPhoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomerPhone, true
}

// SetCustomerPhone sets field value
func (o *DisputeEvidence) SetCustomerPhone(v string) {
	o.CustomerPhone = v
}

// GetServiceDetails returns the ServiceDetails field value
func (o *DisputeEvidence) GetServiceDetails() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceDetails
}

// GetServiceDetailsOk returns a tuple with the ServiceDetails field value
// and a boolean to check if the value has been set.
func (o *DisputeEvidence) GetServiceDetailsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceDetails, true
}

// SetServiceDetails sets field value
func (o *DisputeEvidence) SetServiceDetails(v string) {
	o.ServiceDetails = v
}

// GetDeliveryAddress returns the DeliveryAddress field value if set, zero value otherwise.
func (o *DisputeEvidence) GetDeliveryAddress() string {
	if o == nil || IsNil(o.DeliveryAddress) {
		var ret string
		return ret
	}
	return *o.DeliveryAddress
}

// GetDeliveryAddressOk returns a tuple with the DeliveryAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisputeEvidence) GetDeliveryAddressOk() (*string, bool) {
	if o == nil || IsNil(o.DeliveryAddress) {
		return nil, false
	}
	return o.DeliveryAddress, true
}

// HasDeliveryAddress returns a boolean if a field has been set.
func (o *DisputeEvidence) HasDeliveryAddress() bool {
	if o != nil && !IsNil(o.DeliveryAddress) {
		return true
	}

	return false
}

// SetDeliveryAddress gets a reference to the given string and assigns it to the DeliveryAddress field.
func (o *DisputeEvidence) SetDeliveryAddress(v string) {
	o.DeliveryAddress = &v
}

// GetDeliveryDate returns the DeliveryDate field value if set, zero value otherwise.
func (o *DisputeEvidence) GetDeliveryDate() time.Time {
	if o == nil || IsNil(o.DeliveryDate) {
		var ret time.Time
		return ret
	}
	return *o.DeliveryDate
}

// GetDeliveryDateOk returns a tuple with the DeliveryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisputeEvidence) GetDeliveryDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DeliveryDate) {
		return nil, false
	}
	return o.DeliveryDate, true
}

// HasDeliveryDate returns a boolean if a field has been set.
func (o *DisputeEvidence) HasDeliveryDate() bool {
	if o != nil && !IsNil(o.DeliveryDate) {
		return true
	}

	return false
}

// SetDeliveryDate gets a reference to the given time.Time and assigns it to the DeliveryDate field.
func (o *DisputeEvidence) SetDeliveryDate(v time.Time) {
	o.DeliveryDate = &v
}

func (o DisputeEvidence) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DisputeEvidence) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["customer_email"] = o.CustomerEmail
	toSerialize["customer_name"] = o.CustomerName
	toSerialize["customer_phone"] = o.CustomerPhone
	toSerialize["service_details"] = o.ServiceDetails
	if !IsNil(o.DeliveryAddress) {
		toSerialize["delivery_address"] = o.DeliveryAddress
	}
	if !IsNil(o.DeliveryDate) {
		toSerialize["delivery_date"] = o.DeliveryDate
	}
	return toSerialize, nil
}

func (o *DisputeEvidence) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"customer_email",
		"customer_name",
		"customer_phone",
		"service_details",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDisputeEvidence := _DisputeEvidence{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDisputeEvidence)

	if err != nil {
		return err
	}

	*o = DisputeEvidence(varDisputeEvidence)

	return err
}

type NullableDisputeEvidence struct {
	value *DisputeEvidence
	isSet bool
}

func (v NullableDisputeEvidence) Get() *DisputeEvidence {
	return v.value
}

func (v *NullableDisputeEvidence) Set(val *DisputeEvidence) {
	v.value = val
	v.isSet = true
}

func (v NullableDisputeEvidence) IsSet() bool {
	return v.isSet
}

func (v *NullableDisputeEvidence) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDisputeEvidence(val *DisputeEvidence) *NullableDisputeEvidence {
	return &NullableDisputeEvidence{value: val, isSet: true}
}

func (v NullableDisputeEvidence) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDisputeEvidence) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


