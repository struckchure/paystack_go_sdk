/*
Paystack

The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.

API version: 1.0.0
Contact: techsupport@paystack.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paystack

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the SubscriptionCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionCreate{}

// SubscriptionCreate struct for SubscriptionCreate
type SubscriptionCreate struct {
	// Customer's email address or customer code
	Customer string `json:"customer"`
	// Plan code
	Plan string `json:"plan"`
	// If customer has multiple authorizations, you can set the desired authorization you wish to use for this subscription here.  If this is not supplied, the customer's most recent authorization would be used
	Authorization *string `json:"authorization,omitempty"`
	// Set the date for the first debit. (ISO 8601 format) e.g. 2017-05-16T00:30:13+01:00
	StartDate *time.Time `json:"start_date,omitempty"`
}

type _SubscriptionCreate SubscriptionCreate

// NewSubscriptionCreate instantiates a new SubscriptionCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionCreate(customer string, plan string) *SubscriptionCreate {
	this := SubscriptionCreate{}
	this.Customer = customer
	this.Plan = plan
	return &this
}

// NewSubscriptionCreateWithDefaults instantiates a new SubscriptionCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionCreateWithDefaults() *SubscriptionCreate {
	this := SubscriptionCreate{}
	return &this
}

// GetCustomer returns the Customer field value
func (o *SubscriptionCreate) GetCustomer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Customer
}

// GetCustomerOk returns a tuple with the Customer field value
// and a boolean to check if the value has been set.
func (o *SubscriptionCreate) GetCustomerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Customer, true
}

// SetCustomer sets field value
func (o *SubscriptionCreate) SetCustomer(v string) {
	o.Customer = v
}

// GetPlan returns the Plan field value
func (o *SubscriptionCreate) GetPlan() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Plan
}

// GetPlanOk returns a tuple with the Plan field value
// and a boolean to check if the value has been set.
func (o *SubscriptionCreate) GetPlanOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Plan, true
}

// SetPlan sets field value
func (o *SubscriptionCreate) SetPlan(v string) {
	o.Plan = v
}

// GetAuthorization returns the Authorization field value if set, zero value otherwise.
func (o *SubscriptionCreate) GetAuthorization() string {
	if o == nil || IsNil(o.Authorization) {
		var ret string
		return ret
	}
	return *o.Authorization
}

// GetAuthorizationOk returns a tuple with the Authorization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionCreate) GetAuthorizationOk() (*string, bool) {
	if o == nil || IsNil(o.Authorization) {
		return nil, false
	}
	return o.Authorization, true
}

// HasAuthorization returns a boolean if a field has been set.
func (o *SubscriptionCreate) HasAuthorization() bool {
	if o != nil && !IsNil(o.Authorization) {
		return true
	}

	return false
}

// SetAuthorization gets a reference to the given string and assigns it to the Authorization field.
func (o *SubscriptionCreate) SetAuthorization(v string) {
	o.Authorization = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *SubscriptionCreate) GetStartDate() time.Time {
	if o == nil || IsNil(o.StartDate) {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionCreate) GetStartDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *SubscriptionCreate) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *SubscriptionCreate) SetStartDate(v time.Time) {
	o.StartDate = &v
}

func (o SubscriptionCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["customer"] = o.Customer
	toSerialize["plan"] = o.Plan
	if !IsNil(o.Authorization) {
		toSerialize["authorization"] = o.Authorization
	}
	if !IsNil(o.StartDate) {
		toSerialize["start_date"] = o.StartDate
	}
	return toSerialize, nil
}

func (o *SubscriptionCreate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"customer",
		"plan",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubscriptionCreate := _SubscriptionCreate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubscriptionCreate)

	if err != nil {
		return err
	}

	*o = SubscriptionCreate(varSubscriptionCreate)

	return err
}

type NullableSubscriptionCreate struct {
	value *SubscriptionCreate
	isSet bool
}

func (v NullableSubscriptionCreate) Get() *SubscriptionCreate {
	return v.value
}

func (v *NullableSubscriptionCreate) Set(val *SubscriptionCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionCreate(val *SubscriptionCreate) *NullableSubscriptionCreate {
	return &NullableSubscriptionCreate{value: val, isSet: true}
}

func (v NullableSubscriptionCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


