/*
Paystack

The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.

API version: 1.0.0
Contact: techsupport@paystack.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paystack

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ChargeSubmitBirthday type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChargeSubmitBirthday{}

// ChargeSubmitBirthday struct for ChargeSubmitBirthday
type ChargeSubmitBirthday struct {
	// Customer's birthday in the format YYYY-MM-DD e.g 2016-09-21
	Birthday string `json:"birthday"`
	// The reference of the ongoing transaction
	Reference string `json:"reference"`
}

type _ChargeSubmitBirthday ChargeSubmitBirthday

// NewChargeSubmitBirthday instantiates a new ChargeSubmitBirthday object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChargeSubmitBirthday(birthday string, reference string) *ChargeSubmitBirthday {
	this := ChargeSubmitBirthday{}
	this.Birthday = birthday
	this.Reference = reference
	return &this
}

// NewChargeSubmitBirthdayWithDefaults instantiates a new ChargeSubmitBirthday object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChargeSubmitBirthdayWithDefaults() *ChargeSubmitBirthday {
	this := ChargeSubmitBirthday{}
	return &this
}

// GetBirthday returns the Birthday field value
func (o *ChargeSubmitBirthday) GetBirthday() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Birthday
}

// GetBirthdayOk returns a tuple with the Birthday field value
// and a boolean to check if the value has been set.
func (o *ChargeSubmitBirthday) GetBirthdayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Birthday, true
}

// SetBirthday sets field value
func (o *ChargeSubmitBirthday) SetBirthday(v string) {
	o.Birthday = v
}

// GetReference returns the Reference field value
func (o *ChargeSubmitBirthday) GetReference() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value
// and a boolean to check if the value has been set.
func (o *ChargeSubmitBirthday) GetReferenceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reference, true
}

// SetReference sets field value
func (o *ChargeSubmitBirthday) SetReference(v string) {
	o.Reference = v
}

func (o ChargeSubmitBirthday) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChargeSubmitBirthday) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["birthday"] = o.Birthday
	toSerialize["reference"] = o.Reference
	return toSerialize, nil
}

func (o *ChargeSubmitBirthday) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"birthday",
		"reference",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChargeSubmitBirthday := _ChargeSubmitBirthday{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChargeSubmitBirthday)

	if err != nil {
		return err
	}

	*o = ChargeSubmitBirthday(varChargeSubmitBirthday)

	return err
}

type NullableChargeSubmitBirthday struct {
	value *ChargeSubmitBirthday
	isSet bool
}

func (v NullableChargeSubmitBirthday) Get() *ChargeSubmitBirthday {
	return v.value
}

func (v *NullableChargeSubmitBirthday) Set(val *ChargeSubmitBirthday) {
	v.value = val
	v.isSet = true
}

func (v NullableChargeSubmitBirthday) IsSet() bool {
	return v.isSet
}

func (v *NullableChargeSubmitBirthday) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChargeSubmitBirthday(val *ChargeSubmitBirthday) *NullableChargeSubmitBirthday {
	return &NullableChargeSubmitBirthday{value: val, isSet: true}
}

func (v NullableChargeSubmitBirthday) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChargeSubmitBirthday) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


