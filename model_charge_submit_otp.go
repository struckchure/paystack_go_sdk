/*
Paystack

The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.

API version: 1.0.0
Contact: techsupport@paystack.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paystack

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ChargeSubmitOTP type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChargeSubmitOTP{}

// ChargeSubmitOTP struct for ChargeSubmitOTP
type ChargeSubmitOTP struct {
	// Customer's OTP
	Otp string `json:"otp"`
	// The reference of the ongoing transaction
	Reference string `json:"reference"`
}

type _ChargeSubmitOTP ChargeSubmitOTP

// NewChargeSubmitOTP instantiates a new ChargeSubmitOTP object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChargeSubmitOTP(otp string, reference string) *ChargeSubmitOTP {
	this := ChargeSubmitOTP{}
	this.Otp = otp
	this.Reference = reference
	return &this
}

// NewChargeSubmitOTPWithDefaults instantiates a new ChargeSubmitOTP object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChargeSubmitOTPWithDefaults() *ChargeSubmitOTP {
	this := ChargeSubmitOTP{}
	return &this
}

// GetOtp returns the Otp field value
func (o *ChargeSubmitOTP) GetOtp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Otp
}

// GetOtpOk returns a tuple with the Otp field value
// and a boolean to check if the value has been set.
func (o *ChargeSubmitOTP) GetOtpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Otp, true
}

// SetOtp sets field value
func (o *ChargeSubmitOTP) SetOtp(v string) {
	o.Otp = v
}

// GetReference returns the Reference field value
func (o *ChargeSubmitOTP) GetReference() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value
// and a boolean to check if the value has been set.
func (o *ChargeSubmitOTP) GetReferenceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reference, true
}

// SetReference sets field value
func (o *ChargeSubmitOTP) SetReference(v string) {
	o.Reference = v
}

func (o ChargeSubmitOTP) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChargeSubmitOTP) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["otp"] = o.Otp
	toSerialize["reference"] = o.Reference
	return toSerialize, nil
}

func (o *ChargeSubmitOTP) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"otp",
		"reference",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChargeSubmitOTP := _ChargeSubmitOTP{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChargeSubmitOTP)

	if err != nil {
		return err
	}

	*o = ChargeSubmitOTP(varChargeSubmitOTP)

	return err
}

type NullableChargeSubmitOTP struct {
	value *ChargeSubmitOTP
	isSet bool
}

func (v NullableChargeSubmitOTP) Get() *ChargeSubmitOTP {
	return v.value
}

func (v *NullableChargeSubmitOTP) Set(val *ChargeSubmitOTP) {
	v.value = val
	v.isSet = true
}

func (v NullableChargeSubmitOTP) IsSet() bool {
	return v.isSet
}

func (v *NullableChargeSubmitOTP) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChargeSubmitOTP(val *ChargeSubmitOTP) *NullableChargeSubmitOTP {
	return &NullableChargeSubmitOTP{value: val, isSet: true}
}

func (v NullableChargeSubmitOTP) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChargeSubmitOTP) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


