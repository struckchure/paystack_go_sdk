/*
Paystack

The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.

API version: 1.0.0
Contact: techsupport@paystack.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paystack

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TransferInitiate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransferInitiate{}

// TransferInitiate struct for TransferInitiate
type TransferInitiate struct {
	// Where should we transfer from? Only balance is allowed for now
	Source string `json:"source"`
	// Amount to transfer in kobo if currency is NGN and pesewas if currency is GHS.
	Amount string `json:"amount"`
	// The transfer recipient's code
	Recipient string `json:"recipient"`
	// The reason or narration for the transfer.
	Reason *string `json:"reason,omitempty"`
	// Specify the currency of the transfer. Defaults to NGN.
	Currency *string `json:"currency,omitempty"`
	// If specified, the field should be a unique identifier (in lowercase) for the object.  Only -,_ and alphanumeric characters are allowed.
	Reference *string `json:"reference,omitempty"`
}

type _TransferInitiate TransferInitiate

// NewTransferInitiate instantiates a new TransferInitiate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransferInitiate(source string, amount string, recipient string) *TransferInitiate {
	this := TransferInitiate{}
	this.Source = source
	this.Amount = amount
	this.Recipient = recipient
	return &this
}

// NewTransferInitiateWithDefaults instantiates a new TransferInitiate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransferInitiateWithDefaults() *TransferInitiate {
	this := TransferInitiate{}
	return &this
}

// GetSource returns the Source field value
func (o *TransferInitiate) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *TransferInitiate) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *TransferInitiate) SetSource(v string) {
	o.Source = v
}

// GetAmount returns the Amount field value
func (o *TransferInitiate) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *TransferInitiate) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *TransferInitiate) SetAmount(v string) {
	o.Amount = v
}

// GetRecipient returns the Recipient field value
func (o *TransferInitiate) GetRecipient() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Recipient
}

// GetRecipientOk returns a tuple with the Recipient field value
// and a boolean to check if the value has been set.
func (o *TransferInitiate) GetRecipientOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Recipient, true
}

// SetRecipient sets field value
func (o *TransferInitiate) SetRecipient(v string) {
	o.Recipient = v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *TransferInitiate) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferInitiate) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *TransferInitiate) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *TransferInitiate) SetReason(v string) {
	o.Reason = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *TransferInitiate) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferInitiate) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *TransferInitiate) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *TransferInitiate) SetCurrency(v string) {
	o.Currency = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *TransferInitiate) GetReference() string {
	if o == nil || IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferInitiate) GetReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *TransferInitiate) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *TransferInitiate) SetReference(v string) {
	o.Reference = &v
}

func (o TransferInitiate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransferInitiate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["source"] = o.Source
	toSerialize["amount"] = o.Amount
	toSerialize["recipient"] = o.Recipient
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	return toSerialize, nil
}

func (o *TransferInitiate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"source",
		"amount",
		"recipient",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransferInitiate := _TransferInitiate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransferInitiate)

	if err != nil {
		return err
	}

	*o = TransferInitiate(varTransferInitiate)

	return err
}

type NullableTransferInitiate struct {
	value *TransferInitiate
	isSet bool
}

func (v NullableTransferInitiate) Get() *TransferInitiate {
	return v.value
}

func (v *NullableTransferInitiate) Set(val *TransferInitiate) {
	v.value = val
	v.isSet = true
}

func (v NullableTransferInitiate) IsSet() bool {
	return v.isSet
}

func (v *NullableTransferInitiate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransferInitiate(val *TransferInitiate) *NullableTransferInitiate {
	return &NullableTransferInitiate{value: val, isSet: true}
}

func (v NullableTransferInitiate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransferInitiate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


