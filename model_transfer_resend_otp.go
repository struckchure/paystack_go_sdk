/*
Paystack

The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.

API version: 1.0.0
Contact: techsupport@paystack.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paystack

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TransferResendOTP type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransferResendOTP{}

// TransferResendOTP struct for TransferResendOTP
type TransferResendOTP struct {
	// The transfer code that requires an OTP validation
	TransferCode string `json:"transfer_code"`
	// Either resend_otp or transfer
	Reason string `json:"reason"`
}

type _TransferResendOTP TransferResendOTP

// NewTransferResendOTP instantiates a new TransferResendOTP object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransferResendOTP(transferCode string, reason string) *TransferResendOTP {
	this := TransferResendOTP{}
	this.TransferCode = transferCode
	this.Reason = reason
	return &this
}

// NewTransferResendOTPWithDefaults instantiates a new TransferResendOTP object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransferResendOTPWithDefaults() *TransferResendOTP {
	this := TransferResendOTP{}
	return &this
}

// GetTransferCode returns the TransferCode field value
func (o *TransferResendOTP) GetTransferCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransferCode
}

// GetTransferCodeOk returns a tuple with the TransferCode field value
// and a boolean to check if the value has been set.
func (o *TransferResendOTP) GetTransferCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransferCode, true
}

// SetTransferCode sets field value
func (o *TransferResendOTP) SetTransferCode(v string) {
	o.TransferCode = v
}

// GetReason returns the Reason field value
func (o *TransferResendOTP) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *TransferResendOTP) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *TransferResendOTP) SetReason(v string) {
	o.Reason = v
}

func (o TransferResendOTP) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransferResendOTP) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["transfer_code"] = o.TransferCode
	toSerialize["reason"] = o.Reason
	return toSerialize, nil
}

func (o *TransferResendOTP) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"transfer_code",
		"reason",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransferResendOTP := _TransferResendOTP{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransferResendOTP)

	if err != nil {
		return err
	}

	*o = TransferResendOTP(varTransferResendOTP)

	return err
}

type NullableTransferResendOTP struct {
	value *TransferResendOTP
	isSet bool
}

func (v NullableTransferResendOTP) Get() *TransferResendOTP {
	return v.value
}

func (v *NullableTransferResendOTP) Set(val *TransferResendOTP) {
	v.value = val
	v.isSet = true
}

func (v NullableTransferResendOTP) IsSet() bool {
	return v.isSet
}

func (v *NullableTransferResendOTP) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransferResendOTP(val *TransferResendOTP) *NullableTransferResendOTP {
	return &NullableTransferResendOTP{value: val, isSet: true}
}

func (v NullableTransferResendOTP) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransferResendOTP) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


