/*
Paystack

The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.

API version: 1.0.0
Contact: techsupport@paystack.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paystack

import (
	"encoding/json"
	"time"
)

// checks if the PaymentRequestUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentRequestUpdate{}

// PaymentRequestUpdate struct for PaymentRequestUpdate
type PaymentRequestUpdate struct {
	// Customer id or code
	Customer *string `json:"customer,omitempty"`
	// Payment request amount. Only useful if line items and tax values are ignored.  The endpoint will throw a friendly warning if neither is available.
	Amount *int32 `json:"amount,omitempty"`
	// Specify the currency of the invoice. Allowed values are NGN, GHS, ZAR and USD. Defaults to NGN
	Currency *string `json:"currency,omitempty"`
	// ISO 8601 representation of request due date
	DueDate *time.Time `json:"due_date,omitempty"`
	// A short description of the payment request
	Description *string `json:"description,omitempty"`
	// Array of line items
	LineItems []map[string]interface{} `json:"line_items,omitempty"`
	// Array of taxes
	Tax []map[string]interface{} `json:"tax,omitempty"`
	// Indicates whether Paystack sends an email notification to customer. Defaults to true
	SendNotification []map[string]interface{} `json:"send_notification,omitempty"`
	// Indicate if request should be saved as draft. Defaults to false and overrides send_notification
	Draft []map[string]interface{} `json:"draft,omitempty"`
	// Set to true to create a draft invoice (adds an auto incrementing invoice number if none is provided)  even if there are no line_items or tax passed
	HasInvoice []map[string]interface{} `json:"has_invoice,omitempty"`
	// Numeric value of invoice. Invoice will start from 1 and auto increment from there. This field is to help  override whatever value Paystack decides. Auto increment for subsequent invoices continue from this point.
	InvoiceNumber *int32 `json:"invoice_number,omitempty"`
	// The split code of the transaction split.
	SplitCode *string `json:"split_code,omitempty"`
}

// NewPaymentRequestUpdate instantiates a new PaymentRequestUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentRequestUpdate() *PaymentRequestUpdate {
	this := PaymentRequestUpdate{}
	return &this
}

// NewPaymentRequestUpdateWithDefaults instantiates a new PaymentRequestUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentRequestUpdateWithDefaults() *PaymentRequestUpdate {
	this := PaymentRequestUpdate{}
	return &this
}

// GetCustomer returns the Customer field value if set, zero value otherwise.
func (o *PaymentRequestUpdate) GetCustomer() string {
	if o == nil || IsNil(o.Customer) {
		var ret string
		return ret
	}
	return *o.Customer
}

// GetCustomerOk returns a tuple with the Customer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentRequestUpdate) GetCustomerOk() (*string, bool) {
	if o == nil || IsNil(o.Customer) {
		return nil, false
	}
	return o.Customer, true
}

// HasCustomer returns a boolean if a field has been set.
func (o *PaymentRequestUpdate) HasCustomer() bool {
	if o != nil && !IsNil(o.Customer) {
		return true
	}

	return false
}

// SetCustomer gets a reference to the given string and assigns it to the Customer field.
func (o *PaymentRequestUpdate) SetCustomer(v string) {
	o.Customer = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *PaymentRequestUpdate) GetAmount() int32 {
	if o == nil || IsNil(o.Amount) {
		var ret int32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentRequestUpdate) GetAmountOk() (*int32, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *PaymentRequestUpdate) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given int32 and assigns it to the Amount field.
func (o *PaymentRequestUpdate) SetAmount(v int32) {
	o.Amount = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *PaymentRequestUpdate) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentRequestUpdate) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *PaymentRequestUpdate) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *PaymentRequestUpdate) SetCurrency(v string) {
	o.Currency = &v
}

// GetDueDate returns the DueDate field value if set, zero value otherwise.
func (o *PaymentRequestUpdate) GetDueDate() time.Time {
	if o == nil || IsNil(o.DueDate) {
		var ret time.Time
		return ret
	}
	return *o.DueDate
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentRequestUpdate) GetDueDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DueDate) {
		return nil, false
	}
	return o.DueDate, true
}

// HasDueDate returns a boolean if a field has been set.
func (o *PaymentRequestUpdate) HasDueDate() bool {
	if o != nil && !IsNil(o.DueDate) {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given time.Time and assigns it to the DueDate field.
func (o *PaymentRequestUpdate) SetDueDate(v time.Time) {
	o.DueDate = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PaymentRequestUpdate) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentRequestUpdate) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PaymentRequestUpdate) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PaymentRequestUpdate) SetDescription(v string) {
	o.Description = &v
}

// GetLineItems returns the LineItems field value if set, zero value otherwise.
func (o *PaymentRequestUpdate) GetLineItems() []map[string]interface{} {
	if o == nil || IsNil(o.LineItems) {
		var ret []map[string]interface{}
		return ret
	}
	return o.LineItems
}

// GetLineItemsOk returns a tuple with the LineItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentRequestUpdate) GetLineItemsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.LineItems) {
		return nil, false
	}
	return o.LineItems, true
}

// HasLineItems returns a boolean if a field has been set.
func (o *PaymentRequestUpdate) HasLineItems() bool {
	if o != nil && !IsNil(o.LineItems) {
		return true
	}

	return false
}

// SetLineItems gets a reference to the given []map[string]interface{} and assigns it to the LineItems field.
func (o *PaymentRequestUpdate) SetLineItems(v []map[string]interface{}) {
	o.LineItems = v
}

// GetTax returns the Tax field value if set, zero value otherwise.
func (o *PaymentRequestUpdate) GetTax() []map[string]interface{} {
	if o == nil || IsNil(o.Tax) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Tax
}

// GetTaxOk returns a tuple with the Tax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentRequestUpdate) GetTaxOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Tax) {
		return nil, false
	}
	return o.Tax, true
}

// HasTax returns a boolean if a field has been set.
func (o *PaymentRequestUpdate) HasTax() bool {
	if o != nil && !IsNil(o.Tax) {
		return true
	}

	return false
}

// SetTax gets a reference to the given []map[string]interface{} and assigns it to the Tax field.
func (o *PaymentRequestUpdate) SetTax(v []map[string]interface{}) {
	o.Tax = v
}

// GetSendNotification returns the SendNotification field value if set, zero value otherwise.
func (o *PaymentRequestUpdate) GetSendNotification() []map[string]interface{} {
	if o == nil || IsNil(o.SendNotification) {
		var ret []map[string]interface{}
		return ret
	}
	return o.SendNotification
}

// GetSendNotificationOk returns a tuple with the SendNotification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentRequestUpdate) GetSendNotificationOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.SendNotification) {
		return nil, false
	}
	return o.SendNotification, true
}

// HasSendNotification returns a boolean if a field has been set.
func (o *PaymentRequestUpdate) HasSendNotification() bool {
	if o != nil && !IsNil(o.SendNotification) {
		return true
	}

	return false
}

// SetSendNotification gets a reference to the given []map[string]interface{} and assigns it to the SendNotification field.
func (o *PaymentRequestUpdate) SetSendNotification(v []map[string]interface{}) {
	o.SendNotification = v
}

// GetDraft returns the Draft field value if set, zero value otherwise.
func (o *PaymentRequestUpdate) GetDraft() []map[string]interface{} {
	if o == nil || IsNil(o.Draft) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Draft
}

// GetDraftOk returns a tuple with the Draft field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentRequestUpdate) GetDraftOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Draft) {
		return nil, false
	}
	return o.Draft, true
}

// HasDraft returns a boolean if a field has been set.
func (o *PaymentRequestUpdate) HasDraft() bool {
	if o != nil && !IsNil(o.Draft) {
		return true
	}

	return false
}

// SetDraft gets a reference to the given []map[string]interface{} and assigns it to the Draft field.
func (o *PaymentRequestUpdate) SetDraft(v []map[string]interface{}) {
	o.Draft = v
}

// GetHasInvoice returns the HasInvoice field value if set, zero value otherwise.
func (o *PaymentRequestUpdate) GetHasInvoice() []map[string]interface{} {
	if o == nil || IsNil(o.HasInvoice) {
		var ret []map[string]interface{}
		return ret
	}
	return o.HasInvoice
}

// GetHasInvoiceOk returns a tuple with the HasInvoice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentRequestUpdate) GetHasInvoiceOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.HasInvoice) {
		return nil, false
	}
	return o.HasInvoice, true
}

// HasHasInvoice returns a boolean if a field has been set.
func (o *PaymentRequestUpdate) HasHasInvoice() bool {
	if o != nil && !IsNil(o.HasInvoice) {
		return true
	}

	return false
}

// SetHasInvoice gets a reference to the given []map[string]interface{} and assigns it to the HasInvoice field.
func (o *PaymentRequestUpdate) SetHasInvoice(v []map[string]interface{}) {
	o.HasInvoice = v
}

// GetInvoiceNumber returns the InvoiceNumber field value if set, zero value otherwise.
func (o *PaymentRequestUpdate) GetInvoiceNumber() int32 {
	if o == nil || IsNil(o.InvoiceNumber) {
		var ret int32
		return ret
	}
	return *o.InvoiceNumber
}

// GetInvoiceNumberOk returns a tuple with the InvoiceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentRequestUpdate) GetInvoiceNumberOk() (*int32, bool) {
	if o == nil || IsNil(o.InvoiceNumber) {
		return nil, false
	}
	return o.InvoiceNumber, true
}

// HasInvoiceNumber returns a boolean if a field has been set.
func (o *PaymentRequestUpdate) HasInvoiceNumber() bool {
	if o != nil && !IsNil(o.InvoiceNumber) {
		return true
	}

	return false
}

// SetInvoiceNumber gets a reference to the given int32 and assigns it to the InvoiceNumber field.
func (o *PaymentRequestUpdate) SetInvoiceNumber(v int32) {
	o.InvoiceNumber = &v
}

// GetSplitCode returns the SplitCode field value if set, zero value otherwise.
func (o *PaymentRequestUpdate) GetSplitCode() string {
	if o == nil || IsNil(o.SplitCode) {
		var ret string
		return ret
	}
	return *o.SplitCode
}

// GetSplitCodeOk returns a tuple with the SplitCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentRequestUpdate) GetSplitCodeOk() (*string, bool) {
	if o == nil || IsNil(o.SplitCode) {
		return nil, false
	}
	return o.SplitCode, true
}

// HasSplitCode returns a boolean if a field has been set.
func (o *PaymentRequestUpdate) HasSplitCode() bool {
	if o != nil && !IsNil(o.SplitCode) {
		return true
	}

	return false
}

// SetSplitCode gets a reference to the given string and assigns it to the SplitCode field.
func (o *PaymentRequestUpdate) SetSplitCode(v string) {
	o.SplitCode = &v
}

func (o PaymentRequestUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentRequestUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Customer) {
		toSerialize["customer"] = o.Customer
	}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.DueDate) {
		toSerialize["due_date"] = o.DueDate
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.LineItems) {
		toSerialize["line_items"] = o.LineItems
	}
	if !IsNil(o.Tax) {
		toSerialize["tax"] = o.Tax
	}
	if !IsNil(o.SendNotification) {
		toSerialize["send_notification"] = o.SendNotification
	}
	if !IsNil(o.Draft) {
		toSerialize["draft"] = o.Draft
	}
	if !IsNil(o.HasInvoice) {
		toSerialize["has_invoice"] = o.HasInvoice
	}
	if !IsNil(o.InvoiceNumber) {
		toSerialize["invoice_number"] = o.InvoiceNumber
	}
	if !IsNil(o.SplitCode) {
		toSerialize["split_code"] = o.SplitCode
	}
	return toSerialize, nil
}

type NullablePaymentRequestUpdate struct {
	value *PaymentRequestUpdate
	isSet bool
}

func (v NullablePaymentRequestUpdate) Get() *PaymentRequestUpdate {
	return v.value
}

func (v *NullablePaymentRequestUpdate) Set(val *PaymentRequestUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentRequestUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentRequestUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentRequestUpdate(val *PaymentRequestUpdate) *NullablePaymentRequestUpdate {
	return &NullablePaymentRequestUpdate{value: val, isSet: true}
}

func (v NullablePaymentRequestUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentRequestUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


